#usda 1.0
(
    defaultPrim = "rootPrim"
    metersPerUnit = 1
    upAxis = "Z"
)

def PhysicsScene "physicsScene"
{
    custom float density = 1.225
    custom string integrator = "implicitfast"
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    custom float timestep = 0.001
    custom float viscosity = 0.000018
}

def "keyframe"
{
    def "key_0"
    {
        custom string act = ""
        custom string ctrl = ""
        custom string mpos = ""
        custom string mquat = ""
        custom string name = "home"
        custom string qpos = """0 0 1.16
\t    1 0 0 0
\t    0.0 0.0 0.0 0.0 0.0 0.0 0.0
\t    0.0 0.0 0.0 0.0 0.0 0.0 0.0
\t    0.0 0.0 0.0 0.0 0.0
\t    0.0 0.0 0.0 0.0 0.0 0.0
\t    0.0 0.0 0.0 0.0 0.0 0.0"""
        custom string qvel = ""
        custom float time = 0
    }

    def "key_1"
    {
        custom string act = ""
        custom string ctrl = ""
        custom string mpos = ""
        custom string mquat = ""
        custom string name = "walk"
        custom string qpos = """ 0 0 1.16
\t       1 0 0 0
\t       -0.0004 -0.0009
\t       -0.2599 -1.1535 -1.8253 0.8857 -1.2808 0.0554 0.1156 
0.4404 1.1399 1.8903 0.8525 1.2401 0.0610 -0.1171 
 -0.0061 0.0051 0.0001 
-0.0367 0.0285 0.3657 -0.7683 0.4124 0.0353 
0.0667 0.0080 0.6821 -1.6022 0.6598 -0.0804 
\t       """
        custom string qvel = ""
        custom float time = 0
    }

    def "key_2"
    {
        custom string act = ""
        custom string ctrl = ""
        custom string mpos = ""
        custom string mquat = ""
        custom string name = "walk2"
        custom string qpos = """ 0 0 1.16
\t       1 0 0 0
\t       -0.0000 -0.0026
\t       -0.1906 -1.1587 -1.8264 0.8798 -1.2880 0.0511 0.1127 
\t\t0.4618 1.1390 1.8933 0.8496 1.2394 0.0631 -0.1123 
\t\t-0.0055 0.0037 0.0004 
\t\t-0.0384 0.0319 0.3315 -0.7698 0.4444 0.0433
0.0711 0.0096 0.7306 -1.4341 0.6152 -0.0776  

\t       """
        custom string qvel = ""
        custom float time = 0
    }
}

def "sensor"
{
    def "sensor_1"
    {
        custom string name = "baselink-quat"
        custom string objname = "imu"
        custom string objtype = "site"
        custom string sensorType = "framequat"
    }

    def "sensor_2"
    {
        custom string name = "baselink-velocity"
        custom string sensorType = "velocimeter"
        custom string site = "imu"
    }

    def "sensor_3"
    {
        custom string name = "baselink-gyro"
        custom string sensorType = "gyro"
        custom string site = "imu"
    }

    def "sensor_4"
    {
        custom string name = "baselink-baseAcc"
        custom string sensorType = "accelerometer"
        custom string site = "imu"
    }

    def "sensor_5"
    {
        custom string name = "lf-touch"
        custom string sensorType = "touch"
        custom string site = "lf-tc"
    }

    def "sensor_6"
    {
        custom string name = "rf-touch"
        custom string sensorType = "touch"
        custom string site = "rf-tc"
    }
}

def Xform "rootPrim"
{
    def Xform "base_link"
    {
        def Xform "base_link" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            custom bool hasFreeJoint = 1
            custom int keyframeIndex = 0
            custom bool mjcfInertial = 1
            custom bool mocap = 0
            point3f physics:centerOfMass = (-0.0056641, -0.0013367, 0.23829)
            float3 physics:diagonalInertia = (0.37435254, 0.2771802, 0.22061725)
            prepend rel physics:filteredPairs = [
                </rootPrim/base_link/base_link/Link_head_yaw>,
                </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch>,
                </rootPrim/base_link/base_link/Link_arm_r_01>,
                </rootPrim/base_link/base_link/Link_arm_l_01>,
                </rootPrim/base_link/base_link/Link_waist_pitch>,
                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll>,
            ]
            float physics:mass = 22.447
            quatf physics:principalAxes = (0.9992471, 0.035235517, -0.015086859, 0.0060231346)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1.2000000476837158, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "visuals"
            {
                def "_geom_0" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @AzureLoong/_geom_0.usda@
                )
                {
                    rel material:binding = </rootPrim/base_link/base_link/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base_link/base_link/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base_link/base_link/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                            token outputs:surface
                        }
                    }
                }
            }

            def "collisions"
            {
                def "_geom_1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    prepend payload = @AzureLoong/_geom_1.usda@
                )
                {
                    rel material:binding = </rootPrim/base_link/base_link/collisions/Looks/material_rgba>
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base_link/base_link/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base_link/base_link/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                            token outputs:surface
                        }
                    }
                }
            }

            def "sites"
            {
                def Sphere "imu" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/base_link/base_link/sites/Looks/material_rgba>
                    custom bool mjcfSite = 1
                    custom string name = "imu"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.004999999888241291
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 siteSize = (0.005, 0.005, 0.005)
                    custom string type = "sphere"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base_link/base_link/sites/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base_link/base_link/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            token outputs:surface
                        }
                    }
                }
            }

            def Xform "Link_head_yaw" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 0
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (4.6974e-12, -0.0020814, 0.044801)
                float3 physics:diagonalInertia = (0.000700588, 0.000629, 0.000553812)
                prepend rel physics:filteredPairs = [
                    </rootPrim/base_link/base_link>,
                    </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch>,
                ]
                float physics:mass = 0.84249
                quatf physics:principalAxes = (0.706933, -0.0156756, 0.0156771, 0.706933)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.008999999612569809, 0, 0.40639999508857727, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_2.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_head_yaw/visuals/Looks/material_rgba>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_head_yaw/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_head_yaw/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "collisions"
                {
                    def "_geom_3" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_3.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_head_yaw/collisions/Looks/material_rgba>
                        uniform token physics:approximation = "convexHull"
                        uniform token purpose = "guide"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_head_yaw/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_head_yaw/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "J_head_yaw" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 0.1
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (0, 0, 1)
                        rel physics:body0 = </rootPrim/base_link/base_link>
                        rel physics:body1 = </rootPrim/base_link/base_link/Link_head_yaw>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.009, 0, -0.7936001)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -90.000206
                        float physics:upperLimit = 90.000206
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 0.1
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "Link_head_pitch" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (0.020569, 0.033004, 0.125)
                    float3 physics:diagonalInertia = (0.0063814, 0.00628994, 0.00448146)
                    prepend rel physics:filteredPairs = [
                        </rootPrim/base_link/base_link>,
                        </rootPrim/base_link/base_link/Link_head_yaw>,
                    ]
                    float physics:mass = 1.3943
                    quatf physics:principalAxes = (0.9733902, 0.008406822, 0.22815706, 0.019624906)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.03460000082850456, 0.048500001430511475, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_4" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_4.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/visuals/Looks/material_rgba>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "collisions"
                    {
                        def "_geom_5" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_5.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/collisions/Looks/material_rgba>
                            uniform token physics:approximation = "convexHull"
                            uniform token purpose = "guide"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "J_head_pitch" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 0.1
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, -1, 0)
                            rel physics:body0 = </rootPrim/base_link/base_link/Link_head_yaw>
                            rel physics:body1 = </rootPrim/base_link/base_link/Link_head_yaw/Link_head_pitch>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.009, -0.0346, -0.3579)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -45.000103
                            float physics:upperLimit = 45.000103
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 0.1
                            float physxLimit:X:stiffness = 0
                        }
                    }
                }
            }

            def Xform "Link_arm_r_01" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 1
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.0044946, -0.038294, -0.0000018744)
                float3 physics:diagonalInertia = (0.00084299, 0.00080305, 0.00058712)
                prepend rel physics:filteredPairs = [
                    </rootPrim/base_link/base_link>,
                    </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02>,
                ]
                float physics:mass = 0.75641
                quatf physics:principalAxes = (-0.00016350202, 0.70709807, 0.0008124631, 0.70711505)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.004000000189989805, -0.1615999937057495, 0.3921999931335449, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_6" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_6.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/visuals/Looks/material_rgba>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "collisions"
                {
                    def "_geom_7" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_7.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/collisions/Looks/material_rgba>
                        uniform token physics:approximation = "convexHull"
                        uniform token purpose = "guide"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "J_arm_r_01" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 0.1
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (0, -1, 0)
                        rel physics:body0 = </rootPrim/base_link/base_link>
                        rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.004, -0.1616, -0.80780005)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -170.00002
                        float physics:upperLimit = 170.00002
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 0.1
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "Link_arm_r_02" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (0.042, -0.0674307, 0)
                    float3 physics:diagonalInertia = (0.00226269, 0.00173099, 0.00115402)
                    prepend rel physics:filteredPairs = [
                        </rootPrim/base_link/base_link/Link_arm_r_01>,
                        </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03>,
                    ]
                    float physics:mass = 0.985
                    quatf physics:principalAxes = (0.5, 0.5, -0.5, 0.5)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.041999999433755875, -0.04100000113248825, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_8" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_8.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/visuals/Looks/material_rgba>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "collisions"
                    {
                        def "_geom_9" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_9.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/collisions/Looks/material_rgba>
                            uniform token physics:approximation = "convexHull"
                            uniform token purpose = "guide"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "J_arm_r_02" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 0.1
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (-1, 0, 0)
                            rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01>
                            rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.046, 0.12059999, -0.3922)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -105.000244
                            float physics:upperLimit = 105.000244
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 0.1
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "Link_arm_r_03" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (-0.00141358, -0.164663, 0.0207579)
                        float3 physics:diagonalInertia = (0.00210134, 0.00206459, 0.000754802)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02>,
                            </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04>,
                        ]
                        float physics:mass = 0.959
                        quatf physics:principalAxes = (0.56048095, 0.45439193, -0.44373295, 0.53149796)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.041999999433755875, -0.1225999966263771, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_10" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_10.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/visuals/Looks/material_rgba>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def "_geom_11" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_11.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/collisions/Looks/material_rgba>
                                uniform token physics:approximation = "convexHull"
                                uniform token purpose = "guide"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "J_arm_r_03" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 0.1
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, -1, 0)
                                rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02>
                                rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0.084, -0.081599995, 0)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -170.00002
                                float physics:upperLimit = 170.00002
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 0.1
                                float physxLimit:X:stiffness = 0
                            }
                        }

                        def Xform "Link_arm_r_04" (
                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                        )
                        {
                            custom int keyframeIndex = 0
                            custom bool mjcfInertial = 1
                            custom bool mocap = 0
                            point3f physics:centerOfMass = (-0.038727, -0.060767, -0.021003)
                            float3 physics:diagonalInertia = (0.00109261, 0.000712422, 0.000645102)
                            prepend rel physics:filteredPairs = [
                                </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03>,
                                </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05>,
                            ]
                            float physics:mass = 0.6
                            quatf physics:principalAxes = (0.327701, 0.632603, -0.467367, 0.523444)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.03530000150203705, -0.17739999294281006, 0.024000000208616257, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def "visuals"
                            {
                                def "_geom_12" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_12.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/visuals/Looks/material_rgba>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "collisions"
                            {
                                def "_geom_13" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_13.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/collisions/Looks/material_rgba>
                                    uniform token physics:approximation = "convexHull"
                                    uniform token purpose = "guide"
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "joints"
                            {
                                def PhysicsRevoluteJoint "J_arm_r_04" (
                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                )
                                {
                                    float drive:X:physics:damping = 0.1
                                    float drive:X:physics:stiffness = 0
                                    uniform token drive:X:physics:type = "force"
                                    custom int keyframeIndex = 0
                                    custom bool limited = 1
                                    float3 physics:axisVector = (-1, 0, 0)
                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03>
                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04>
                                    float physics:breakForce = 3.4028235e38
                                    float physics:breakTorque = 3.4028235e38
                                    point3f physics:localPos0 = (-0.006699998, -0.054799996, 0.024)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                    float physics:lowerLimit = 0
                                    float physics:upperLimit = 170.00002
                                    float physxJoint:armature = 0.01
                                    float physxLimit:X:damping = 0.1
                                    float physxLimit:X:stiffness = 0
                                }
                            }

                            def Xform "Link_arm_r_05" (
                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                            )
                            {
                                custom int keyframeIndex = 0
                                custom bool mjcfInertial = 1
                                custom bool mocap = 0
                                point3f physics:centerOfMass = (0.000032712, -0.068658, -0.00011178)
                                float3 physics:diagonalInertia = (0.00252251, 0.0024111, 0.000448695)
                                prepend rel physics:filteredPairs = [
                                    </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04>,
                                    </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06>,
                                    </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07>,
                                ]
                                float physics:mass = 0.68976
                                quatf physics:principalAxes = (0.707661, 0.706543, -0.00260336, 0.00247055)
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.03530000150203705, -0.10350000113248825, -0.024000000208616257, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def "visuals"
                                {
                                    def "_geom_14" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_14.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/visuals/Looks/material_rgba>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "collisions"
                                {
                                    def "_geom_15" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_15.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/collisions/Looks/material_rgba>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "joints"
                                {
                                    def PhysicsRevoluteJoint "J_arm_r_05" (
                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                    )
                                    {
                                        float drive:X:physics:damping = 0.1
                                        float drive:X:physics:stiffness = 0
                                        uniform token drive:X:physics:type = "force"
                                        custom int keyframeIndex = 0
                                        custom bool limited = 1
                                        float3 physics:axisVector = (0, -1, 0)
                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04>
                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05>
                                        float physics:breakForce = 3.4028235e38
                                        float physics:breakTorque = 3.4028235e38
                                        point3f physics:localPos0 = (-0.0706, 0.07389999, -0.048)
                                        point3f physics:localPos1 = (0, 0, 0)
                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                        float physics:lowerLimit = -170.00002
                                        float physics:upperLimit = 170.00002
                                        float physxJoint:armature = 0.01
                                        float physxLimit:X:damping = 0.1
                                        float physxLimit:X:stiffness = 0
                                    }
                                }

                                def Xform "Link_arm_r_06" (
                                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                )
                                {
                                    custom int keyframeIndex = 0
                                    custom bool mjcfInertial = 1
                                    custom bool mocap = 0
                                    point3f physics:centerOfMass = (0.026078, -8.9588e-7, 0.0016637)
                                    float3 physics:diagonalInertia = (0.00015693, 0.000145601, 0.000104979)
                                    prepend rel physics:filteredPairs = [
                                        </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05>,
                                        </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07>,
                                    ]
                                    float physics:mass = 0.28
                                    quatf physics:principalAxes = (0.70708084, 0.0018510795, 0.0018838096, 0.7071278)
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.026499999687075615, -0.1965000033378601, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]

                                    def "visuals"
                                    {
                                        def "_geom_16" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_16.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/visuals/Looks/material_rgba>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "collisions"
                                    {
                                        def "_geom_17" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_17.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/collisions/Looks/material_rgba>
                                            uniform token physics:approximation = "convexHull"
                                            uniform token purpose = "guide"
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "joints"
                                    {
                                        def PhysicsRevoluteJoint "J_arm_r_06" (
                                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                        )
                                        {
                                            float drive:X:physics:damping = 0.1
                                            float drive:X:physics:stiffness = 0
                                            uniform token drive:X:physics:type = "force"
                                            custom int keyframeIndex = 0
                                            custom bool limited = 1
                                            float3 physics:axisVector = (1, 0, 0)
                                            rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05>
                                            rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06>
                                            float physics:breakForce = 3.4028235e38
                                            float physics:breakTorque = 3.4028235e38
                                            point3f physics:localPos0 = (0.008800002, -0.093, 0.024)
                                            point3f physics:localPos1 = (0, 0, 0)
                                            quatf physics:localRot0 = (1, 0, 0, 0)
                                            quatf physics:localRot1 = (1, 0, 0, 0)
                                            float physics:lowerLimit = -105.000244
                                            float physics:upperLimit = 105.000244
                                            float physxJoint:armature = 0.01
                                            float physxLimit:X:damping = 0.1
                                            float physxLimit:X:stiffness = 0
                                        }
                                    }

                                    def Xform "Link_arm_r_07" (
                                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                    )
                                    {
                                        custom int keyframeIndex = 0
                                        custom bool mjcfInertial = 1
                                        custom bool mocap = 0
                                        point3f physics:centerOfMass = (-0.007859, -0.15817, -0.027736)
                                        float3 physics:diagonalInertia = (0.00303761, 0.00257091, 0.000729379)
                                        prepend rel physics:filteredPairs = [
                                            </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05>,
                                            </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06>,
                                        ]
                                        float physics:mass = 0.61354
                                        quatf physics:principalAxes = (0.42754292, 0.44353288, -0.5530939, 0.5608679)
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.026499999687075615, 0, 0.03180000185966492, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]

                                        def "visuals"
                                        {
                                            def "_geom_18" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_18.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/visuals/Looks/material_rgba>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "collisions"
                                        {
                                            def "_geom_19" (
                                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_19.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/collisions/Looks/material_rgba>
                                                uniform token physics:approximation = "convexHull"
                                                uniform token purpose = "guide"
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "joints"
                                        {
                                            def PhysicsRevoluteJoint "J_arm_r_07" (
                                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                            )
                                            {
                                                float drive:X:physics:damping = 0.1
                                                float drive:X:physics:stiffness = 0
                                                uniform token drive:X:physics:type = "force"
                                                custom int keyframeIndex = 0
                                                custom bool limited = 1
                                                float3 physics:axisVector = (0, 0, 1)
                                                rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06>
                                                rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_r_01/Link_arm_r_02/Link_arm_r_03/Link_arm_r_04/Link_arm_r_05/Link_arm_r_06/Link_arm_r_07>
                                                float physics:breakForce = 3.4028235e38
                                                float physics:breakTorque = 3.4028235e38
                                                point3f physics:localPos0 = (0.053, 0.1965, 0.0318)
                                                point3f physics:localPos1 = (0, 0, 0)
                                                quatf physics:localRot0 = (1, 0, 0, 0)
                                                quatf physics:localRot1 = (1, 0, 0, 0)
                                                float physics:lowerLimit = -60.000134
                                                float physics:upperLimit = 60.000134
                                                float physxJoint:armature = 0.01
                                                float physxLimit:X:damping = 0.1
                                                float physxLimit:X:stiffness = 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def Xform "Link_arm_l_01" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 2
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.00449465, 0.0382942, -0.0000018744)
                float3 physics:diagonalInertia = (0.000842986, 0.000803053, 0.000587115)
                prepend rel physics:filteredPairs = [
                    </rootPrim/base_link/base_link>,
                    </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02>,
                ]
                float physics:mass = 0.756406
                quatf physics:principalAxes = (-0.0008124961, 0.70711505, 0.00016342402, 0.70709807)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.004000000189989805, 0.1615999937057495, 0.3921999931335449, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_20" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_20.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/visuals/Looks/material_rgba>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "collisions"
                {
                    def "_geom_21" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_21.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/collisions/Looks/material_rgba>
                        uniform token physics:approximation = "convexHull"
                        uniform token purpose = "guide"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "J_arm_l_01" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 0.1
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (0, 1, 0)
                        rel physics:body0 = </rootPrim/base_link/base_link>
                        rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.004, 0.1616, -0.80780005)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -170.00002
                        float physics:upperLimit = 170.00002
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 0.1
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "Link_arm_l_02" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.042, 0.0674307, 0)
                    float3 physics:diagonalInertia = (0.00226269, 0.00173099, 0.00115402)
                    prepend rel physics:filteredPairs = [
                        </rootPrim/base_link/base_link/Link_arm_l_01>,
                        </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03>,
                    ]
                    float physics:mass = 0.985
                    quatf physics:principalAxes = (0.5, 0.5, -0.5, 0.5)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.041999999433755875, 0.04100000113248825, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_22" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_22.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/visuals/Looks/material_rgba>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "collisions"
                    {
                        def "_geom_23" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_23.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/collisions/Looks/material_rgba>
                            uniform token physics:approximation = "convexHull"
                            uniform token purpose = "guide"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "J_arm_l_02" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 0.1
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (-1, 0, 0)
                            rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01>
                            rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0.038, -0.12059999, -0.3922)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -105.000244
                            float physics:upperLimit = 105.000244
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 0.1
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "Link_arm_l_03" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.00141358, 0.164663, 0.0207579)
                        float3 physics:diagonalInertia = (0.00210134, 0.00206459, 0.000754802)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02>,
                            </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04>,
                        ]
                        float physics:mass = 0.959
                        quatf physics:principalAxes = (0.44373295, 0.53149796, -0.56048095, 0.45439193)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.041999999433755875, 0.1225999966263771, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_24" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_24.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/visuals/Looks/material_rgba>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def "_geom_25" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_25.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/collisions/Looks/material_rgba>
                                uniform token physics:approximation = "convexHull"
                                uniform token purpose = "guide"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "J_arm_l_03" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 0.1
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 1, 0)
                                rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02>
                                rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (-0.084, 0.081599995, 0)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -170.00002
                                float physics:upperLimit = 170.00002
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 0.1
                                float physxLimit:X:stiffness = 0
                            }
                        }

                        def Xform "Link_arm_l_04" (
                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                        )
                        {
                            custom int keyframeIndex = 0
                            custom bool mjcfInertial = 1
                            custom bool mocap = 0
                            point3f physics:centerOfMass = (0.038727, 0.0607672, -0.0210032)
                            float3 physics:diagonalInertia = (0.00109257, 0.000712419, 0.000645098)
                            prepend rel physics:filteredPairs = [
                                </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03>,
                                </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05>,
                            ]
                            float physics:mass = 0.6
                            quatf physics:principalAxes = (0.467371, 0.52344, -0.327692, 0.632608)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.03530000150203705, 0.17739999294281006, 0.024000000208616257, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def "visuals"
                            {
                                def "_geom_26" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_26.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/visuals/Looks/material_rgba>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "collisions"
                            {
                                def "_geom_27" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_27.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/collisions/Looks/material_rgba>
                                    uniform token physics:approximation = "convexHull"
                                    uniform token purpose = "guide"
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "joints"
                            {
                                def PhysicsRevoluteJoint "J_arm_l_04" (
                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                )
                                {
                                    float drive:X:physics:damping = 0.1
                                    float drive:X:physics:stiffness = 0
                                    uniform token drive:X:physics:type = "force"
                                    custom int keyframeIndex = 0
                                    custom bool limited = 1
                                    float3 physics:axisVector = (1, 0, 0)
                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03>
                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04>
                                    float physics:breakForce = 3.4028235e38
                                    float physics:breakTorque = 3.4028235e38
                                    point3f physics:localPos0 = (0.006699998, 0.054799996, 0.024)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                    float physics:lowerLimit = 0
                                    float physics:upperLimit = 170.00002
                                    float physxJoint:armature = 0.01
                                    float physxLimit:X:damping = 0.1
                                    float physxLimit:X:stiffness = 0
                                }
                            }

                            def Xform "Link_arm_l_05" (
                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                            )
                            {
                                custom int keyframeIndex = 0
                                custom bool mjcfInertial = 1
                                custom bool mocap = 0
                                point3f physics:centerOfMass = (-0.000032712, 0.068658, -0.00011178)
                                float3 physics:diagonalInertia = (0.00252251, 0.0024111, 0.000448695)
                                prepend rel physics:filteredPairs = [
                                    </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04>,
                                    </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06>,
                                    </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07>,
                                ]
                                float physics:mass = 0.68976
                                quatf physics:principalAxes = (0.706543, 0.707661, 0.00247055, -0.00260336)
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.03530000150203705, 0.10350000113248825, -0.024000000208616257, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def "visuals"
                                {
                                    def "_geom_28" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_28.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/visuals/Looks/material_rgba>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "collisions"
                                {
                                    def "_geom_29" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_29.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/collisions/Looks/material_rgba>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "joints"
                                {
                                    def PhysicsRevoluteJoint "J_arm_l_05" (
                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                    )
                                    {
                                        float drive:X:physics:damping = 0.1
                                        float drive:X:physics:stiffness = 0
                                        uniform token drive:X:physics:type = "force"
                                        custom int keyframeIndex = 0
                                        custom bool limited = 1
                                        float3 physics:axisVector = (0, 1, 0)
                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04>
                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05>
                                        float physics:breakForce = 3.4028235e38
                                        float physics:breakTorque = 3.4028235e38
                                        point3f physics:localPos0 = (0.0706, -0.07389999, -0.048)
                                        point3f physics:localPos1 = (0, 0, 0)
                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                        float physics:lowerLimit = -170.00002
                                        float physics:upperLimit = 170.00002
                                        float physxJoint:armature = 0.01
                                        float physxLimit:X:damping = 0.1
                                        float physxLimit:X:stiffness = 0
                                    }
                                }

                                def Xform "Link_arm_l_06" (
                                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                )
                                {
                                    custom int keyframeIndex = 0
                                    custom bool mjcfInertial = 1
                                    custom bool mocap = 0
                                    point3f physics:centerOfMass = (-0.0260777, 8.95877e-7, 0.00166373)
                                    float3 physics:diagonalInertia = (0.000156927, 0.000145598, 0.000104981)
                                    prepend rel physics:filteredPairs = [
                                        </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05>,
                                        </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07>,
                                    ]
                                    float physics:mass = 0.28
                                    quatf physics:principalAxes = (0.70708084, -0.0018512795, -0.0018840196, 0.7071278)
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.026499999687075615, 0.1965000033378601, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]

                                    def "visuals"
                                    {
                                        def "_geom_30" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_30.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/visuals/Looks/material_rgba>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "collisions"
                                    {
                                        def "_geom_31" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_31.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/collisions/Looks/material_rgba>
                                            uniform token physics:approximation = "convexHull"
                                            uniform token purpose = "guide"
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "joints"
                                    {
                                        def PhysicsRevoluteJoint "J_arm_l_06" (
                                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                        )
                                        {
                                            float drive:X:physics:damping = 0.1
                                            float drive:X:physics:stiffness = 0
                                            uniform token drive:X:physics:type = "force"
                                            custom int keyframeIndex = 0
                                            custom bool limited = 1
                                            float3 physics:axisVector = (-1, 0, 0)
                                            rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05>
                                            rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06>
                                            float physics:breakForce = 3.4028235e38
                                            float physics:breakTorque = 3.4028235e38
                                            point3f physics:localPos0 = (-0.008800002, 0.093, 0.024)
                                            point3f physics:localPos1 = (0, 0, 0)
                                            quatf physics:localRot0 = (1, 0, 0, 0)
                                            quatf physics:localRot1 = (1, 0, 0, 0)
                                            float physics:lowerLimit = -105.000244
                                            float physics:upperLimit = 105.000244
                                            float physxJoint:armature = 0.01
                                            float physxLimit:X:damping = 0.1
                                            float physxLimit:X:stiffness = 0
                                        }
                                    }

                                    def Xform "Link_arm_l_07" (
                                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                    )
                                    {
                                        custom int keyframeIndex = 0
                                        custom bool mjcfInertial = 1
                                        custom bool mocap = 0
                                        point3f physics:centerOfMass = (-0.0077872, 0.15705, -0.027733)
                                        float3 physics:diagonalInertia = (0.0030372, 0.00257042, 0.000729374)
                                        prepend rel physics:filteredPairs = [
                                            </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05>,
                                            </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06>,
                                        ]
                                        float physics:mass = 0.61354
                                        quatf physics:principalAxes = (0.44356212, 0.42753908, -0.5608711, 0.5530701)
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.026499999687075615, 0, 0.03180000185966492, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]

                                        def "visuals"
                                        {
                                            def "_geom_32" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_32.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/visuals/Looks/material_rgba>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "collisions"
                                        {
                                            def "_geom_33" (
                                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_33.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/collisions/Looks/material_rgba>
                                                uniform token physics:approximation = "convexHull"
                                                uniform token purpose = "guide"
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "joints"
                                        {
                                            def PhysicsRevoluteJoint "J_arm_l_07" (
                                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                            )
                                            {
                                                float drive:X:physics:damping = 0.1
                                                float drive:X:physics:stiffness = 0
                                                uniform token drive:X:physics:type = "force"
                                                custom int keyframeIndex = 0
                                                custom bool limited = 1
                                                float3 physics:axisVector = (0, 0, 1)
                                                rel physics:body0 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06>
                                                rel physics:body1 = </rootPrim/base_link/base_link/Link_arm_l_01/Link_arm_l_02/Link_arm_l_03/Link_arm_l_04/Link_arm_l_05/Link_arm_l_06/Link_arm_l_07>
                                                float physics:breakForce = 3.4028235e38
                                                float physics:breakTorque = 3.4028235e38
                                                point3f physics:localPos0 = (-0.053, -0.1965, 0.0318)
                                                point3f physics:localPos1 = (0, 0, 0)
                                                quatf physics:localRot0 = (1, 0, 0, 0)
                                                quatf physics:localRot1 = (1, 0, 0, 0)
                                                float physics:lowerLimit = -60.000134
                                                float physics:upperLimit = 60.000134
                                                float physxJoint:armature = 0.01
                                                float physxLimit:X:damping = 0.1
                                                float physxLimit:X:stiffness = 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def Xform "Link_waist_pitch" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 3
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.00073496, 0.049925, -0.000029695)
                float3 physics:diagonalInertia = (0.00619062, 0.00520125, 0.00473712)
                prepend rel physics:filteredPairs = [
                    </rootPrim/base_link/base_link>,
                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll>,
                ]
                float physics:mass = 2.6964
                quatf physics:principalAxes = (0.52412504, 0.47471306, -0.5220951, 0.47682005)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.06525000184774399, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_34" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_34.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/visuals/Looks/material_rgba>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "collisions"
                {
                    def "_geom_35" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        prepend payload = @AzureLoong/_geom_35.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/collisions/Looks/material_rgba>
                        uniform token physics:approximation = "convexHull"
                        uniform token purpose = "guide"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "J_waist_pitch" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 0.1
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (0, -1, 0)
                        rel physics:body0 = </rootPrim/base_link/base_link>
                        rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0, -0.06525, -1.2)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -17.00023
                        float physics:upperLimit = 45.000103
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 0.1
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "Link_waist_roll" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.0037424, -0.001, -0.016856)
                    float3 physics:diagonalInertia = (0.018825, 0.0173147, 0.00587397)
                    prepend rel physics:filteredPairs = [
                        </rootPrim/base_link/base_link>,
                        </rootPrim/base_link/base_link/Link_waist_pitch>,
                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                    ]
                    float physics:mass = 2.9806
                    quatf physics:principalAxes = (0.57699513, 0.4087501, 0.4087501, 0.57699513)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06400000303983688, 0.06549999862909317, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_36" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_36.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/visuals/Looks/material_rgba>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "collisions"
                    {
                        def "_geom_37" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            prepend payload = @AzureLoong/_geom_37.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/collisions/Looks/material_rgba>
                            uniform token physics:approximation = "convexHull"
                            uniform token purpose = "guide"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "J_waist_roll" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 0.1
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (1, 0, 0)
                            rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch>
                            rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.064, 0.13075, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -39.9999
                            float physics:upperLimit = 39.9999
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 0.1
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "Link_waist_yaw" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (-0.096172, -0.001, -0.057836)
                        float3 physics:diagonalInertia = (0.109523, 0.0897521, 0.032766)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw>,
                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch>,
                        ]
                        float physics:mass = 7.3588
                        quatf physics:principalAxes = (0.571972, 0.571972, -0.41575, 0.41575)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.06750000268220901, 0, -0.09799999743700027, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_38" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_38.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/visuals/Looks/material_rgba>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def "_geom_39" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                prepend payload = @AzureLoong/_geom_39.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/collisions/Looks/material_rgba>
                                uniform token physics:approximation = "convexHull"
                                uniform token purpose = "guide"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "J_waist_yaw" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 0.1
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 0, 1)
                                rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll>
                                rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0.1315, -0.0655, -0.098)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -45.000103
                                float physics:upperLimit = 45.000103
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 0.1
                                float physxLimit:X:stiffness = 0
                            }
                        }

                        def Xform "Link_hip_r_roll" (
                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                        )
                        {
                            custom int keyframeIndex = 0
                            custom bool mjcfInertial = 1
                            custom bool mocap = 0
                            point3f physics:centerOfMass = (0.075725, -0.0010616, 0.016591)
                            float3 physics:diagonalInertia = (0.00450677, 0.00399627, 0.00360606)
                            prepend rel physics:filteredPairs = [
                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw>,
                            ]
                            float physics:mass = 2.4334
                            quatf physics:principalAxes = (0.35733697, 0.61061394, 0.6060699, 0.36351097)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08749999850988388, -0.11999999731779099, -0.0689999982714653, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def "visuals"
                            {
                                def "_geom_40" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_40.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/visuals/Looks/material_rgba>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "collisions"
                            {
                                def "_geom_41" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_41.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/collisions/Looks/material_rgba>
                                    uniform token physics:approximation = "convexHull"
                                    uniform token purpose = "guide"
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "joints"
                            {
                                def PhysicsRevoluteJoint "J_hip_r_roll" (
                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                )
                                {
                                    float drive:X:physics:damping = 0.1
                                    float drive:X:physics:stiffness = 0
                                    uniform token drive:X:physics:type = "force"
                                    custom int keyframeIndex = 0
                                    custom bool limited = 1
                                    float3 physics:axisVector = (1, 0, 0)
                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>
                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll>
                                    float physics:breakForce = 3.4028235e38
                                    float physics:breakTorque = 3.4028235e38
                                    point3f physics:localPos0 = (-0.155, -0.12, 0.029)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                    float physics:lowerLimit = -9.999832
                                    float physics:upperLimit = 24.999866
                                    float physxJoint:armature = 0.01
                                    float physxLimit:X:damping = 0.1
                                    float physxLimit:X:stiffness = 0
                                }
                            }

                            def Xform "Link_hip_r_yaw" (
                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                            )
                            {
                                custom int keyframeIndex = 0
                                custom bool mjcfInertial = 1
                                custom bool mocap = 0
                                point3f physics:centerOfMass = (-3.0911e-8, -0.0071356, -0.10063)
                                float3 physics:diagonalInertia = (0.0080901, 0.0077365, 0.0066316)
                                prepend rel physics:filteredPairs = [
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll>,
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch>,
                                ]
                                float physics:mass = 3.4303
                                quatf physics:principalAxes = (0.70653605, 0.028403703, -0.028403703, 0.70653605)
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.08224999904632568, -0.0010000000474974513, -0.009999999776482582, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def "visuals"
                                {
                                    def "_geom_42" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_42.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/visuals/Looks/material_rgba>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "collisions"
                                {
                                    def "_geom_43" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_43.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/collisions/Looks/material_rgba>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "joints"
                                {
                                    def PhysicsRevoluteJoint "J_hip_r_yaw" (
                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                    )
                                    {
                                        float drive:X:physics:damping = 0.1
                                        float drive:X:physics:stiffness = 0
                                        uniform token drive:X:physics:type = "force"
                                        custom int keyframeIndex = 0
                                        custom bool limited = 1
                                        float3 physics:axisVector = (0, 0, 1)
                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll>
                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw>
                                        float physics:breakForce = 3.4028235e38
                                        float physics:breakTorque = 3.4028235e38
                                        point3f physics:localPos0 = (0.16975, 0.118999995, 0.059)
                                        point3f physics:localPos1 = (0, 0, 0)
                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                        float physics:lowerLimit = -39.9999
                                        float physics:upperLimit = 39.9999
                                        float physxJoint:armature = 0.01
                                        float physxLimit:X:damping = 0.1
                                        float physxLimit:X:stiffness = 0
                                    }
                                }

                                def Xform "Link_hip_r_pitch" (
                                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                )
                                {
                                    custom int keyframeIndex = 0
                                    custom bool mjcfInertial = 1
                                    custom bool mocap = 0
                                    point3f physics:centerOfMass = (0.0010856, -0.05497, -0.14535)
                                    float3 physics:diagonalInertia = (0.0434902, 0.0378123, 0.0151385)
                                    prepend rel physics:filteredPairs = [
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw>,
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch>,
                                    ]
                                    float physics:mass = 5.2378
                                    quatf physics:principalAxes = (0.99949586, -0.015916798, 0.0136966985, 0.023812896)
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.03674999997019768, -0.1054999977350235, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]

                                    def "visuals"
                                    {
                                        def "_geom_44" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_44.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/visuals/Looks/material_rgba>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "collisions"
                                    {
                                        def "_geom_45" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_45.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/collisions/Looks/material_rgba>
                                            uniform token physics:approximation = "convexHull"
                                            uniform token purpose = "guide"
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "joints"
                                    {
                                        def PhysicsRevoluteJoint "J_hip_r_pitch" (
                                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                        )
                                        {
                                            float drive:X:physics:damping = 0.1
                                            float drive:X:physics:stiffness = 0
                                            uniform token drive:X:physics:type = "force"
                                            custom int keyframeIndex = 0
                                            custom bool limited = 1
                                            float3 physics:axisVector = (0, -1, 0)
                                            rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw>
                                            rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch>
                                            float physics:breakForce = 3.4028235e38
                                            float physics:breakTorque = 3.4028235e38
                                            point3f physics:localPos0 = (-0.08225, 0.03775, -0.0955)
                                            point3f physics:localPos1 = (0, 0, 0)
                                            quatf physics:localRot0 = (1, 0, 0, 0)
                                            quatf physics:localRot1 = (1, 0, 0, 0)
                                            float physics:lowerLimit = -45.000103
                                            float physics:upperLimit = 105.000244
                                            float physxJoint:armature = 0.01
                                            float physxLimit:X:damping = 0.1
                                            float physxLimit:X:stiffness = 0
                                        }
                                    }

                                    def Xform "Link_knee_r_pitch" (
                                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                    )
                                    {
                                        custom int keyframeIndex = 0
                                        custom bool mjcfInertial = 1
                                        custom bool mocap = 0
                                        point3f physics:centerOfMass = (-0.0096425, 0.0000029338, -0.13601)
                                        float3 physics:diagonalInertia = (0.0242159, 0.0238518, 0.00228461)
                                        prepend rel physics:filteredPairs = [
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch>,
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch>,
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll>,
                                        ]
                                        float physics:mass = 2.9775
                                        quatf physics:principalAxes = (0.7820376, -0.0030616785, 0.016178992, 0.6230137)
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.011250000447034836, -0.4000000059604645, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]

                                        def "visuals"
                                        {
                                            def "_geom_46" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_46.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/visuals/Looks/material_rgba>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "collisions"
                                        {
                                            def "_geom_47" (
                                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_47.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/collisions/Looks/material_rgba>
                                                uniform token physics:approximation = "convexHull"
                                                uniform token purpose = "guide"
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "joints"
                                        {
                                            def PhysicsRevoluteJoint "J_knee_r_pitch" (
                                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                            )
                                            {
                                                float drive:X:physics:damping = 0.1
                                                float drive:X:physics:stiffness = 0
                                                uniform token drive:X:physics:type = "force"
                                                custom int keyframeIndex = 0
                                                custom bool limited = 1
                                                float3 physics:axisVector = (0, -1, 0)
                                                rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch>
                                                rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch>
                                                float physics:breakForce = 3.4028235e38
                                                float physics:breakTorque = 3.4028235e38
                                                point3f physics:localPos0 = (0, -0.048, -0.2945)
                                                point3f physics:localPos1 = (0, 0, 0)
                                                quatf physics:localRot0 = (1, 0, 0, 0)
                                                quatf physics:localRot1 = (1, 0, 0, 0)
                                                float physics:lowerLimit = -134.99974
                                                float physics:upperLimit = 5.0002027
                                                float physxJoint:armature = 0.01
                                                float physxLimit:X:damping = 0.1
                                                float physxLimit:X:stiffness = 0
                                            }
                                        }

                                        def Xform "Link_ankle_r_pitch" (
                                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                        )
                                        {
                                            custom int keyframeIndex = 0
                                            custom bool mjcfInertial = 1
                                            custom bool mocap = 0
                                            point3f physics:centerOfMass = (-6.1835e-12, -1.2655e-7, -2.4682e-8)
                                            float3 physics:diagonalInertia = (0.000027175, 0.000026565, 0.0000061118)
                                            prepend rel physics:filteredPairs = [
                                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch>,
                                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll>,
                                            ]
                                            float physics:mass = 0.10145
                                            quatf physics:principalAxes = (0.7071068, 0.7071068, 0, 0)
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3869999945163727, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]

                                            def "visuals"
                                            {
                                                def "_geom_48" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @AzureLoong/_geom_48.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/visuals/Looks/material_rgba>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_rgba"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                            token outputs:surface
                                                        }
                                                    }
                                                }
                                            }

                                            def "collisions"
                                            {
                                                def "_geom_49" (
                                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    prepend payload = @AzureLoong/_geom_49.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/collisions/Looks/material_rgba>
                                                    uniform token physics:approximation = "convexHull"
                                                    uniform token purpose = "guide"
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_rgba"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                            token outputs:surface
                                                        }
                                                    }
                                                }
                                            }

                                            def "joints"
                                            {
                                                def PhysicsRevoluteJoint "J_ankle_r_pitch" (
                                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                )
                                                {
                                                    float drive:X:physics:damping = 0.1
                                                    float drive:X:physics:stiffness = 0
                                                    uniform token drive:X:physics:type = "force"
                                                    custom int keyframeIndex = 0
                                                    custom bool limited = 1
                                                    float3 physics:axisVector = (0, -1, 0)
                                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch>
                                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch>
                                                    float physics:breakForce = 3.4028235e38
                                                    float physics:breakTorque = 3.4028235e38
                                                    point3f physics:localPos0 = (0, 0.01125, 0.013000011)
                                                    point3f physics:localPos1 = (0, 0, 0)
                                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                                    float physics:lowerLimit = -24.999866
                                                    float physics:upperLimit = 69.37774
                                                    float physxJoint:armature = 0.01
                                                    float physxLimit:X:damping = 0.1
                                                    float physxLimit:X:stiffness = 0
                                                }
                                            }

                                            def Xform "Link_ankle_r_roll" (
                                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                            )
                                            {
                                                custom int keyframeIndex = 0
                                                custom bool mjcfInertial = 1
                                                custom bool mocap = 0
                                                point3f physics:centerOfMass = (0.041078, -8.9152e-8, -0.043909)
                                                float3 physics:diagonalInertia = (0.00365937, 0.0036465, 0.000416828)
                                                prepend rel physics:filteredPairs = [
                                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch>,
                                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch>,
                                                ]
                                                float physics:mass = 0.75229
                                                quatf physics:principalAxes = (0, 0.6770349, 0, 0.73595095)
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                                def "visuals"
                                                {
                                                    def "_geom_50" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @AzureLoong/_geom_50.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/visuals/Looks/material_rgba>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "collisions"
                                                {
                                                    def Cube "_geom_51" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.245, -0.08, -0.087), (0.245, 0.08, 0.087)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.1225, 0.04, 0.0435)
                                                        custom int group = 0
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/collisions/Looks/material_rgba>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_51"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.047504615, 0.000082666884, -0.02654531)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (1, 0, 0, 0)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.24500000476837158, 0, 0, 0), (0, 0.07999999821186066, 0, 0), (0, 0, 0.08699999749660492, 0), (0.04750461503863335, 0.00008266688382718712, -0.026545310392975807, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (1, 0, 0)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "sites"
                                                {
                                                    def Cube "rf_tc" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                    )
                                                    {
                                                        float3[] extent = [(-0.123, -0.041, -0.044), (0.123, 0.041, 0.044)]
                                                        custom int group = 0
                                                        custom bool hasFromto = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/sites/Looks/material_rgba>
                                                        custom bool mjcfSite = 1
                                                        custom string name = "rf-tc"
                                                        custom float3 pos = (0.047504615, 0.000082666884, -0.02654531)
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0, 1, 0, 0)
                                                        custom float3 siteSize = (0.123, 0.041, 0.044)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.12300000339746475, 0, 0, 0), (0, 0.04100000113248825, 0, 0), (0, 0, 0.04399999976158142, 0), (0.04750461503863335, 0.00008266688382718712, -0.026545310392975807, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0, 1, 0)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "joints"
                                                {
                                                    def PhysicsRevoluteJoint "J_ankle_r_roll" (
                                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                    )
                                                    {
                                                        float drive:X:physics:damping = 0.1
                                                        float drive:X:physics:stiffness = 0
                                                        uniform token drive:X:physics:type = "force"
                                                        custom int keyframeIndex = 0
                                                        custom bool limited = 1
                                                        float3 physics:axisVector = (1, 0, 0)
                                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch>
                                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_r_roll/Link_hip_r_yaw/Link_hip_r_pitch/Link_knee_r_pitch/Link_ankle_r_pitch/Link_ankle_r_roll>
                                                        float physics:breakForce = 3.4028235e38
                                                        float physics:breakTorque = 3.4028235e38
                                                        point3f physics:localPos0 = (0, 0, 0.387)
                                                        point3f physics:localPos1 = (0, 0, 0)
                                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                                        float physics:lowerLimit = -24.999866
                                                        float physics:upperLimit = 24.999866
                                                        float physxJoint:armature = 0.01
                                                        float physxLimit:X:damping = 0.1
                                                        float physxLimit:X:stiffness = 0
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        def Xform "Link_hip_l_roll" (
                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                        )
                        {
                            custom int keyframeIndex = 1
                            custom bool mjcfInertial = 1
                            custom bool mocap = 0
                            point3f physics:centerOfMass = (0.075725, -0.00093843, 0.016591)
                            float3 physics:diagonalInertia = (0.00425703, 0.00397477, 0.00337779)
                            prepend rel physics:filteredPairs = [
                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw>,
                            ]
                            float physics:mass = 2.4334
                            quatf physics:principalAxes = (0.41175124, 0.57320535, 0.5838854, 0.40121624)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08749999850988388, 0.11999999731779099, -0.0689999982714653, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def "visuals"
                            {
                                def "_geom_52" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_52.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/visuals/Looks/material_rgba>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "collisions"
                            {
                                def "_geom_53" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                    prepend payload = @AzureLoong/_geom_53.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/collisions/Looks/material_rgba>
                                    uniform token physics:approximation = "convexHull"
                                    uniform token purpose = "guide"
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "joints"
                            {
                                def PhysicsRevoluteJoint "J_hip_l_roll" (
                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                )
                                {
                                    float drive:X:physics:damping = 0.1
                                    float drive:X:physics:stiffness = 0
                                    uniform token drive:X:physics:type = "force"
                                    custom int keyframeIndex = 0
                                    custom bool limited = 1
                                    float3 physics:axisVector = (1, 0, 0)
                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>
                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll>
                                    float physics:breakForce = 3.4028235e38
                                    float physics:breakTorque = 3.4028235e38
                                    point3f physics:localPos0 = (-0.155, 0.12, 0.029)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                    float physics:lowerLimit = -9.999832
                                    float physics:upperLimit = 24.999866
                                    float physxJoint:armature = 0.01
                                    float physxLimit:X:damping = 0.1
                                    float physxLimit:X:stiffness = 0
                                }
                            }

                            def Xform "Link_hip_l_yaw" (
                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                            )
                            {
                                custom int keyframeIndex = 0
                                custom bool mjcfInertial = 1
                                custom bool mocap = 0
                                point3f physics:centerOfMass = (-3.1716e-8, 0.0071358, -0.10063)
                                float3 physics:diagonalInertia = (0.0080901, 0.0077365, 0.0066315)
                                prepend rel physics:filteredPairs = [
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll>,
                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch>,
                                ]
                                float physics:mass = 3.4304
                                quatf physics:principalAxes = (0.7065362, -0.028401807, 0.028401807, 0.7065362)
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.08224999904632568, -0.0010000000474974513, -0.009999999776482582, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def "visuals"
                                {
                                    def "_geom_54" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_54.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/visuals/Looks/material_rgba>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "collisions"
                                {
                                    def "_geom_55" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @AzureLoong/_geom_55.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/collisions/Looks/material_rgba>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                token outputs:surface
                                            }
                                        }
                                    }
                                }

                                def "joints"
                                {
                                    def PhysicsRevoluteJoint "J_hip_l_yaw" (
                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                    )
                                    {
                                        float drive:X:physics:damping = 0.1
                                        float drive:X:physics:stiffness = 0
                                        uniform token drive:X:physics:type = "force"
                                        custom int keyframeIndex = 0
                                        custom bool limited = 1
                                        float3 physics:axisVector = (0, 0, 1)
                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll>
                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw>
                                        float physics:breakForce = 3.4028235e38
                                        float physics:breakTorque = 3.4028235e38
                                        point3f physics:localPos0 = (0.16975, -0.121, 0.059)
                                        point3f physics:localPos1 = (0, 0, 0)
                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                        float physics:lowerLimit = -39.9999
                                        float physics:upperLimit = 39.9999
                                        float physxJoint:armature = 0.01
                                        float physxLimit:X:damping = 0.1
                                        float physxLimit:X:stiffness = 0
                                    }
                                }

                                def Xform "Link_hip_l_pitch" (
                                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                )
                                {
                                    custom int keyframeIndex = 0
                                    custom bool mjcfInertial = 1
                                    custom bool mocap = 0
                                    point3f physics:centerOfMass = (0.0010856, 0.05497, -0.14535)
                                    float3 physics:diagonalInertia = (0.0434902, 0.0378123, 0.0151385)
                                    prepend rel physics:filteredPairs = [
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw>,
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw>,
                                        </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch>,
                                    ]
                                    float physics:mass = 5.2378
                                    quatf physics:principalAxes = (0.99949574, 0.015916597, 0.013696796, -0.023821594)
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.03674999997019768, -0.1054999977350235, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]

                                    def "visuals"
                                    {
                                        def "_geom_56" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_56.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/visuals/Looks/material_rgba>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "collisions"
                                    {
                                        def "_geom_57" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                            prepend payload = @AzureLoong/_geom_57.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/collisions/Looks/material_rgba>
                                            uniform token physics:approximation = "convexHull"
                                            uniform token purpose = "guide"
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "joints"
                                    {
                                        def PhysicsRevoluteJoint "J_hip_l_pitch" (
                                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                        )
                                        {
                                            float drive:X:physics:damping = 0.1
                                            float drive:X:physics:stiffness = 0
                                            uniform token drive:X:physics:type = "force"
                                            custom int keyframeIndex = 0
                                            custom bool limited = 1
                                            float3 physics:axisVector = (0, -1, 0)
                                            rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw>
                                            rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch>
                                            float physics:breakForce = 3.4028235e38
                                            float physics:breakTorque = 3.4028235e38
                                            point3f physics:localPos0 = (-0.08225, -0.03575, -0.0955)
                                            point3f physics:localPos1 = (0, 0, 0)
                                            quatf physics:localRot0 = (1, 0, 0, 0)
                                            quatf physics:localRot1 = (1, 0, 0, 0)
                                            float physics:lowerLimit = -45.000103
                                            float physics:upperLimit = 105.000244
                                            float physxJoint:armature = 0.01
                                            float physxLimit:X:damping = 0.1
                                            float physxLimit:X:stiffness = 0
                                        }
                                    }

                                    def Xform "Link_knee_l_pitch" (
                                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                    )
                                    {
                                        custom int keyframeIndex = 0
                                        custom bool mjcfInertial = 1
                                        custom bool mocap = 0
                                        point3f physics:centerOfMass = (-0.0096425, -0.0000028684, -0.13601)
                                        float3 physics:diagonalInertia = (0.0242149, 0.0238508, 0.00228461)
                                        prepend rel physics:filteredPairs = [
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch>,
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch>,
                                            </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll>,
                                        ]
                                        float physics:mass = 2.9775
                                        quatf physics:principalAxes = (0.6230142, 0.016178306, -0.0030600112, 0.7820373)
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.011250000447034836, -0.4000000059604645, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]

                                        def "visuals"
                                        {
                                            def "_geom_58" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_58.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/visuals/Looks/material_rgba>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "collisions"
                                        {
                                            def "_geom_59" (
                                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                prepend payload = @AzureLoong/_geom_59.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/collisions/Looks/material_rgba>
                                                uniform token physics:approximation = "convexHull"
                                                uniform token purpose = "guide"
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "joints"
                                        {
                                            def PhysicsRevoluteJoint "J_knee_l_pitch" (
                                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                            )
                                            {
                                                float drive:X:physics:damping = 0.1
                                                float drive:X:physics:stiffness = 0
                                                uniform token drive:X:physics:type = "force"
                                                custom int keyframeIndex = 0
                                                custom bool limited = 1
                                                float3 physics:axisVector = (0, -1, 0)
                                                rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch>
                                                rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch>
                                                float physics:breakForce = 3.4028235e38
                                                float physics:breakTorque = 3.4028235e38
                                                point3f physics:localPos0 = (0, 0.048, -0.2945)
                                                point3f physics:localPos1 = (0, 0, 0)
                                                quatf physics:localRot0 = (1, 0, 0, 0)
                                                quatf physics:localRot1 = (1, 0, 0, 0)
                                                float physics:lowerLimit = -134.99974
                                                float physics:upperLimit = 5.0002027
                                                float physxJoint:armature = 0.01
                                                float physxLimit:X:damping = 0.1
                                                float physxLimit:X:stiffness = 0
                                            }
                                        }

                                        def Xform "Link_ankle_l_pitch" (
                                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                        )
                                        {
                                            custom int keyframeIndex = 0
                                            custom bool mjcfInertial = 1
                                            custom bool mocap = 0
                                            point3f physics:centerOfMass = (-6.1835e-12, 1.2655e-7, 6.7022e-8)
                                            float3 physics:diagonalInertia = (0.000027175, 0.000026565, 0.0000061118)
                                            prepend rel physics:filteredPairs = [
                                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch>,
                                                </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll>,
                                            ]
                                            float physics:mass = 0.10145
                                            quatf physics:principalAxes = (0.7071068, 0.7071068, 0, 0)
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3869999945163727, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]

                                            def "visuals"
                                            {
                                                def "_geom_60" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @AzureLoong/_geom_60.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/visuals/Looks/material_rgba>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_rgba"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                            token outputs:surface
                                                        }
                                                    }
                                                }
                                            }

                                            def "collisions"
                                            {
                                                def "_geom_61" (
                                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    prepend payload = @AzureLoong/_geom_61.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/collisions/Looks/material_rgba>
                                                    uniform token physics:approximation = "convexHull"
                                                    uniform token purpose = "guide"
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_rgba"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                            token outputs:surface
                                                        }
                                                    }
                                                }
                                            }

                                            def "joints"
                                            {
                                                def PhysicsRevoluteJoint "J_ankle_l_pitch" (
                                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                )
                                                {
                                                    float drive:X:physics:damping = 0.1
                                                    float drive:X:physics:stiffness = 0
                                                    uniform token drive:X:physics:type = "force"
                                                    custom int keyframeIndex = 0
                                                    custom bool limited = 1
                                                    float3 physics:axisVector = (0, -1, 0)
                                                    rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch>
                                                    rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch>
                                                    float physics:breakForce = 3.4028235e38
                                                    float physics:breakTorque = 3.4028235e38
                                                    point3f physics:localPos0 = (0, -0.01125, 0.013000011)
                                                    point3f physics:localPos1 = (0, 0, 0)
                                                    quatf physics:localRot0 = (1, 0, 0, 0)
                                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                                    float physics:lowerLimit = -25.006168
                                                    float physics:upperLimit = 69.37774
                                                    float physxJoint:armature = 0.01
                                                    float physxLimit:X:damping = 0.1
                                                    float physxLimit:X:stiffness = 0
                                                }
                                            }

                                            def Xform "Link_ankle_l_roll" (
                                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                            )
                                            {
                                                custom int keyframeIndex = 0
                                                custom bool mjcfInertial = 1
                                                custom bool mocap = 0
                                                point3f physics:centerOfMass = (0.041077, -2.9318e-8, -0.043909)
                                                float3 physics:diagonalInertia = (0.00365937, 0.0036465, 0.000416828)
                                                prepend rel physics:filteredPairs = [
                                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch>,
                                                    </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch>,
                                                ]
                                                float physics:mass = 0.752288
                                                quatf physics:principalAxes = (0, 0.6770349, 0, 0.73595095)
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                                def "visuals"
                                                {
                                                    def "_geom_62" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @AzureLoong/_geom_62.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/visuals/Looks/material_rgba>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.784, 0.784, 0.784)
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "collisions"
                                                {
                                                    def Cube "_geom_63" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.245, -0.0804, -0.0884), (0.245, 0.0804, 0.0884)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.1225, 0.0402, 0.0442)
                                                        custom int group = 0
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/collisions/Looks/material_rgba>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_63"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.0475, 0.0012208642, -0.027223988)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (1, 0, 0, 0)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.24500000476837158, 0, 0, 0), (0, 0.0803999975323677, 0, 0), (0, 0, 0.08839999884366989, 0), (0.04749999940395355, 0.0012208642438054085, -0.027223987504839897, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (1, 0, 0)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "sites"
                                                {
                                                    def Cube "lf_tc" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                    )
                                                    {
                                                        float3[] extent = [(-0.123, -0.041, -0.045), (0.123, 0.041, 0.045)]
                                                        custom int group = 0
                                                        custom bool hasFromto = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/sites/Looks/material_rgba>
                                                        custom bool mjcfSite = 1
                                                        custom string name = "lf-tc"
                                                        custom float3 pos = (0.0475, 0.0012208642, -0.027223988)
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0, 1, 0, 0)
                                                        custom float3 siteSize = (0.123, 0.041, 0.045)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.12300000339746475, 0, 0, 0), (0, 0.04100000113248825, 0, 0), (0, 0, 0.04500000178813934, 0), (0.04749999940395355, 0.0012208642438054085, -0.027223987504839897, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0, 1, 0)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "joints"
                                                {
                                                    def PhysicsRevoluteJoint "J_ankle_l_roll" (
                                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                    )
                                                    {
                                                        float drive:X:physics:damping = 0.1
                                                        float drive:X:physics:stiffness = 0
                                                        uniform token drive:X:physics:type = "force"
                                                        custom int keyframeIndex = 0
                                                        custom bool limited = 1
                                                        float3 physics:axisVector = (1, 0, 0)
                                                        rel physics:body0 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch>
                                                        rel physics:body1 = </rootPrim/base_link/base_link/Link_waist_pitch/Link_waist_roll/Link_waist_yaw/Link_hip_l_roll/Link_hip_l_yaw/Link_hip_l_pitch/Link_knee_l_pitch/Link_ankle_l_pitch/Link_ankle_l_roll>
                                                        float physics:breakForce = 3.4028235e38
                                                        float physics:breakTorque = 3.4028235e38
                                                        point3f physics:localPos0 = (0, 0, 0.387)
                                                        point3f physics:localPos1 = (0, 0, 0)
                                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                                        float physics:lowerLimit = -24.999866
                                                        float physics:upperLimit = 24.999866
                                                        float physxJoint:armature = 0.01
                                                        float physxLimit:X:damping = 0.1
                                                        float physxLimit:X:stiffness = 0
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    def Xform "worldBody" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI"]
    )
    {
    }
}

def "actuators"
{
    def "actuator_0"
    {
        custom int actuatorIdx = 1
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-80 80", "1", "J_arm_l_01", "M_arm_l_01"]
    }

    def "actuator_1"
    {
        custom int actuatorIdx = 2
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-80 80", "1", "J_arm_l_02", "M_arm_l_02"]
    }

    def "actuator_2"
    {
        custom int actuatorIdx = 3
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-48 48", "1", "J_arm_l_03", "M_arm_l_03"]
    }

    def "actuator_3"
    {
        custom int actuatorIdx = 4
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-48 48", "1", "J_arm_l_04", "M_arm_l_04"]
    }

    def "actuator_4"
    {
        custom int actuatorIdx = 5
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_l_05", "M_arm_l_05"]
    }

    def "actuator_5"
    {
        custom int actuatorIdx = 6
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_l_06", "M_arm_l_06"]
    }

    def "actuator_6"
    {
        custom int actuatorIdx = 7
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_l_07", "M_arm_l_07"]
    }

    def "actuator_7"
    {
        custom int actuatorIdx = 8
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-80 80", "1", "J_arm_r_01", "M_arm_r_01"]
    }

    def "actuator_8"
    {
        custom int actuatorIdx = 9
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-80 80", "1", "J_arm_r_02", "M_arm_r_02"]
    }

    def "actuator_9"
    {
        custom int actuatorIdx = 10
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-48 48", "1", "J_arm_r_03", "M_arm_r_03"]
    }

    def "actuator_10"
    {
        custom int actuatorIdx = 11
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-48 48", "1", "J_arm_r_04", "M_arm_r_04"]
    }

    def "actuator_11"
    {
        custom int actuatorIdx = 12
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_r_05", "M_arm_r_05"]
    }

    def "actuator_12"
    {
        custom int actuatorIdx = 13
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_r_06", "M_arm_r_06"]
    }

    def "actuator_13"
    {
        custom int actuatorIdx = 14
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-12.4 12.4", "1", "J_arm_r_07", "M_arm_r_07"]
    }

    def "actuator_14"
    {
        custom int actuatorIdx = 15
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-26 26", "1", "J_head_yaw", "M_head_yaw"]
    }

    def "actuator_15"
    {
        custom int actuatorIdx = 16
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-26 26", "1", "J_head_pitch", "M_head_pitch"]
    }

    def "actuator_16"
    {
        custom int actuatorIdx = 17
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-315 315", "1", "J_waist_pitch", "M_waist_pitch"]
    }

    def "actuator_17"
    {
        custom int actuatorIdx = 18
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-315 315", "1", "J_waist_roll", "M_waist_roll"]
    }

    def "actuator_18"
    {
        custom int actuatorIdx = 19
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-121 121", "1", "J_waist_yaw", "M_waist_yaw"]
    }

    def "actuator_19"
    {
        custom int actuatorIdx = 20
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-320 320", "1", "J_hip_l_roll", "M_hip_l_roll"]
    }

    def "actuator_20"
    {
        custom int actuatorIdx = 21
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-160 160", "1", "J_hip_l_yaw", "M_hip_l_yaw"]
    }

    def "actuator_21"
    {
        custom int actuatorIdx = 22
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-396 396", "1", "J_hip_l_pitch", "M_hip_l_pitch"]
    }

    def "actuator_22"
    {
        custom int actuatorIdx = 23
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-396 396", "1", "J_knee_l_pitch", "M_knee_l_pitch"]
    }

    def "actuator_23"
    {
        custom int actuatorIdx = 24
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-58.5 58.5", "1", "J_ankle_l_pitch", "M_ankle_l_pitch"]
    }

    def "actuator_24"
    {
        custom int actuatorIdx = 25
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-58.5 58.5", "1", "J_ankle_l_roll", "M_ankle_l_roll"]
    }

    def "actuator_25"
    {
        custom int actuatorIdx = 26
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-320 320", "1", "J_hip_r_roll", "M_hip_r_roll"]
    }

    def "actuator_26"
    {
        custom int actuatorIdx = 27
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-160 160", "1", "J_hip_r_yaw", "M_hip_r_yaw"]
    }

    def "actuator_27"
    {
        custom int actuatorIdx = 28
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-396 396", "1", "J_hip_r_pitch", "M_hip_r_pitch"]
    }

    def "actuator_28"
    {
        custom int actuatorIdx = 29
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-396 396", "1", "J_knee_r_pitch", "M_knee_r_pitch"]
    }

    def "actuator_29"
    {
        custom int actuatorIdx = 30
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-58.5 58.5", "1", "J_ankle_r_pitch", "M_ankle_r_pitch"]
    }

    def "actuator_30"
    {
        custom int actuatorIdx = 31
        custom int actuatorType = 0
        custom string[] keys = ["ctrllimited", "ctrlrange", "gear", "joint", "name"]
        custom string[] values = ["true", "-58.5 58.5", "1", "J_ankle_r_roll", "M_ankle_r_roll"]
    }
}

def "tendons"
{
}

def "equalities"
{
}

