#usda 1.0
(
    defaultPrim = "rootPrim"
    metersPerUnit = 1
    upAxis = "Z"
)

def PhysicsScene "physicsScene"
{
    custom float density = 1.225
    custom string integrator = "implicitfast"
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    custom float timestep = 0.002
    custom float viscosity = 0.000018
}

def "sensor"
{
    def "sensor_1"
    {
        custom string name = "imu_quat"
        custom string objname = "imu"
        custom string objtype = "site"
        custom string sensorType = "framequat"
    }

    def "sensor_2"
    {
        custom string cutoff = "34.9"
        custom string name = "imu_omega"
        custom string noise = "5e-4"
        custom string sensorType = "gyro"
        custom string site = "imu"
    }

    def "sensor_3"
    {
        custom string cutoff = "157"
        custom string name = "imu_acc"
        custom string noise = "1e-2"
        custom string sensorType = "accelerometer"
        custom string site = "imu"
    }

    def "sensor_4"
    {
        custom string name = "fr_foot"
        custom string objname = "fr_site"
        custom string objtype = "site"
        custom string refname = "imu"
        custom string reftype = "site"
        custom string sensorType = "framepos"
    }

    def "sensor_5"
    {
        custom string name = "fl_foot"
        custom string objname = "fl_site"
        custom string objtype = "site"
        custom string refname = "imu"
        custom string reftype = "site"
        custom string sensorType = "framepos"
    }

    def "sensor_6"
    {
        custom string name = "hr_foot"
        custom string objname = "hr_site"
        custom string objtype = "site"
        custom string refname = "imu"
        custom string reftype = "site"
        custom string sensorType = "framepos"
    }

    def "sensor_7"
    {
        custom string name = "hl_foot"
        custom string objname = "hl_site"
        custom string objtype = "site"
        custom string refname = "imu"
        custom string reftype = "site"
        custom string sensorType = "framepos"
    }

    def "sensor_8"
    {
        custom string name = "fr_touch"
        custom string sensorType = "touch"
        custom string site = "fr_site"
    }

    def "sensor_9"
    {
        custom string name = "fl_touch"
        custom string sensorType = "touch"
        custom string site = "fl_site"
    }

    def "sensor_10"
    {
        custom string name = "rr_touch"
        custom string sensorType = "touch"
        custom string site = "hr_site"
    }

    def "sensor_11"
    {
        custom string name = "rl_touch"
        custom string sensorType = "touch"
        custom string site = "hl_site"
    }
}

def Xform "rootPrim"
{
    def Xform "trunk_link"
    {
        def Xform "trunk_link" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            custom bool hasFreeJoint = 1
            custom int keyframeIndex = 0
            custom bool mjcfInertial = 1
            custom bool mocap = 0
            point3f physics:centerOfMass = (0.007942, -0.00567, 0.007308)
            float3 physics:diagonalInertia = (0.31703708, 1.1800427, 1.3523206)
            prepend rel physics:filteredPairs = </rootPrim/trunk_link/trunk_link>
            float physics:mass = 30.0746
            quatf physics:principalAxes = (0.9997055, 0.003974415, -0.02363532, -0.003824598)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.800000011920929, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "visuals"
            {
                def "_geom_0" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @A01B_URDF/_geom_0.usda@
                )
                {
                    rel material:binding = </rootPrim/trunk_link/trunk_link/visuals/Looks/material_robot_color>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_robot_color"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/visuals/Looks/material_robot_color/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }
                }
            }

            def "collisions"
            {
                def Cube "_geom_1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.7, -0.26, -0.16), (0.7, 0.26, 0.16)]
                    custom float3 friction = (0.8, 0.005, 0.0001)
                    custom float3 geomSize = (0.35, 0.13, 0.08)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    custom float margin = 0.001
                    custom float mass = 0
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_1"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (0, 0, -0.04)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.699999988079071, 0, 0, 0), (0, 0.25999999046325684, 0, 0), (0, 0, 0.1599999964237213, 0), (0, 0, -0.03999999910593033, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Scope "Looks"
                {
                    def Material "material_robot_color"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_1/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_2/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_2/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_3"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_3/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_3.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_3/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_3/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_4"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_4/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_4.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_4/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_4/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_5"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_5/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_5.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_5/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_5/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_6"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_6/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_6.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_6/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_6/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_7"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_7/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_7.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_7/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_7/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_8"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_8/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_8.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_8/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_8/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }

                    def Material "material_robot_color_9"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_9/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_9.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_9/diffuseTexture.outputs:rgb>
                            float inputs:metallic = 0.25
                            float inputs:opacity = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 1
                            token outputs:surface
                        }

                        def Shader "diffuseTexture"
                        {
                            uniform token info:id = "UsdUVTexture"
                            asset inputs:file = @A01B_URDF/materials/texture2.png@
                            bool inputs:project_uvw = 1
                            float4 inputs:scale = (1, 1, 1, 1)
                            float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_9/stReader.outputs:result>
                            token inputs:wrapS = "repeat"
                            token inputs:wrapT = "repeat"
                            float3 outputs:rgb
                        }
                    }
                }

                def Cylinder "_geom_2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.35, -0.07, -0.07), (0.35, 0.07, 0.07)]
                    custom float3 friction = (0.8, 0.005, 0.0001)
                    custom float3 geomSize = (0.07, 0.35, 1)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    double height = 0.699999988079071
                    custom float margin = 0.001
                    custom float mass = 0
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_1>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_2"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (0, -0.13, -0.05)
                    uniform token purpose = "guide"
                    custom quatf quat = (0.70710677, 0, 0.70710677, 0)
                    double radius = 0.07000000029802322
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (3.422854177870249e-8, 0, -0.9999999657714582, 0), (0, 1, 0, 0), (0.9999999657714582, 0, 3.422854177870249e-8, 0), (0, -0.12999999523162842, -0.05000000074505806, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cylinder "_geom_3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.35, -0.07, -0.07), (0.35, 0.07, 0.07)]
                    custom float3 friction = (0.8, 0.005, 0.0001)
                    custom float3 geomSize = (0.07, 0.35, 1)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    double height = 0.699999988079071
                    custom float margin = 0.001
                    custom float mass = 0
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_2>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_3"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (0, 0.13, -0.05)
                    uniform token purpose = "guide"
                    custom quatf quat = (0.70710677, 0, 0.70710677, 0)
                    double radius = 0.07000000029802322
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (3.422854177870249e-8, 0, -0.9999999657714582, 0), (0, 1, 0, 0), (0.9999999657714582, 0, 3.422854177870249e-8, 0), (0, 0.12999999523162842, -0.05000000074505806, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "fr_base_bracket" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.06, -0.03, -0.02), (0.06, 0.03, 0.02)]
                    custom float3 friction = (1, 0.02, 0.01)
                    custom float3 geomSize = (0.03, 0.015, 0.01)
                    custom int group = 5
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    custom float margin = 0.001
                    custom float mass = 0.001
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_3>
                    custom bool mjcfGeom = 1
                    custom string name = "fr_base_bracket"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (0.285, -0.108, -0.145)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.015, 1, 0.031)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.05999999865889549, 0, 0, 0), (0, 0.029999999329447746, 0, 0), (0, 0, 0.019999999552965164, 0), (0.2849999964237213, -0.1080000028014183, -0.14499999582767487, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "fl_base_bracket" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.06, -0.03, -0.02), (0.06, 0.03, 0.02)]
                    custom float3 friction = (1, 0.02, 0.01)
                    custom float3 geomSize = (0.03, 0.015, 0.01)
                    custom int group = 5
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    custom float margin = 0.001
                    custom float mass = 0.001
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_4>
                    custom bool mjcfGeom = 1
                    custom string name = "fl_base_bracket"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (0.285, 0.072, -0.145)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.015, 1, 0.031)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.05999999865889549, 0, 0, 0), (0, 0.029999999329447746, 0, 0), (0, 0, 0.019999999552965164, 0), (0.2849999964237213, 0.07199999690055847, -0.14499999582767487, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "hr_base_bracket" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.06, -0.03, -0.02), (0.06, 0.03, 0.02)]
                    custom float3 friction = (1, 0.02, 0.01)
                    custom float3 geomSize = (0.03, 0.015, 0.01)
                    custom int group = 5
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    custom float margin = 0.001
                    custom float mass = 0.001
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_5>
                    custom bool mjcfGeom = 1
                    custom string name = "hr_base_bracket"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (-0.177, -0.108, -0.145)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.015, 1, 0.031)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.05999999865889549, 0, 0, 0), (0, 0.029999999329447746, 0, 0), (0, 0, 0.019999999552965164, 0), (-0.1770000010728836, -0.1080000028014183, -0.14499999582767487, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "hl_base_bracket" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.06, -0.03, -0.02), (0.06, 0.03, 0.02)]
                    custom float3 friction = (1, 0.02, 0.01)
                    custom float3 geomSize = (0.03, 0.015, 0.01)
                    custom int group = 5
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    custom float margin = 0.001
                    custom float mass = 0.001
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_6>
                    custom bool mjcfGeom = 1
                    custom string name = "hl_base_bracket"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (-0.177, 0.072, -0.145)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.015, 1, 0.031)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.05999999865889549, 0, 0, 0), (0, 0.029999999329447746, 0, 0), (0, 0, 0.019999999552965164, 0), (-0.1770000010728836, 0.07199999690055847, -0.14499999582767487, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cylinder "top_radar" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.05, -0.06, -0.06), (0.05, 0.06, 0.06)]
                    custom float3 friction = (1, 0.02, 0.01)
                    custom float3 geomSize = (0.06, 0.05, 1)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    double height = 0.10000000149011612
                    custom float margin = 0.001
                    custom float mass = 2.3
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_7>
                    custom bool mjcfGeom = 1
                    custom string name = "top_radar"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (0.44, -0.02, 0.1)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.05999999865889549
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.015, 1, 0.031)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.4399999976158142, -0.019999999552965164, 0.10000000149011612, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cylinder "front_face" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.05, -0.02, -0.02), (0.05, 0.02, 0.02)]
                    custom float3 friction = (0.8, 0.005, 0.0001)
                    custom float3 geomSize = (0.02, 0.05, 1)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    double height = 0.10000000149011612
                    custom float margin = 0.001
                    custom float mass = 0
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_8>
                    custom bool mjcfGeom = 1
                    custom string name = "front_face"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (0.51, -0.02, 0.03)
                    uniform token purpose = "guide"
                    custom quatf quat = (0, 0, 0.70710677, 0.70710677)
                    double radius = 0.019999999552965164
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (-0.9999999315429164, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, 0.9999999657714582, 3.422854177870249e-8, 0), (0.5099999904632568, -0.019999999552965164, 0.029999999329447746, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cylinder "back_face" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 3
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.05, -0.02, -0.02), (0.05, 0.02, 0.02)]
                    custom float3 friction = (0.8, 0.005, 0.0001)
                    custom float3 geomSize = (0.02, 0.05, 1)
                    custom int group = 4
                    custom bool hasFromto = 0
                    custom bool hasMass = 1
                    double height = 0.10000000149011612
                    custom float margin = 0.001
                    custom float mass = 0
                    custom string material = "robot_color"
                    rel material:binding = </rootPrim/trunk_link/trunk_link/collisions/Looks/material_robot_color_9>
                    custom bool mjcfGeom = 1
                    custom string name = "back_face"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (-0.4, -0.02, 0.03)
                    uniform token purpose = "guide"
                    custom quatf quat = (0, 0, 0.70710677, 0.70710677)
                    double radius = 0.019999999552965164
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (-0.9999999315429164, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, 0.9999999657714582, 3.422854177870249e-8, 0), (-0.4000000059604645, -0.019999999552965164, 0.029999999329447746, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }
            }

            def "sites"
            {
                def Sphere "imu" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/trunk_link/trunk_link/sites/Looks/material_rgba>
                    custom bool mjcfSite = 1
                    custom string name = "imu"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.009999999776482582
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 siteSize = (0.01, 0.005, 0.005)
                    custom string type = "sphere"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/sites/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            token outputs:surface
                        }
                    }
                }
            }

            def Xform "fr_abad" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                custom int keyframeIndex = 0
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.022282, 0.016137, 0.000446)
                float3 physics:diagonalInertia = (0.00830465, 0.00689115, 0.0036792)
                float physics:mass = 2.4
                quatf physics:principalAxes = (0.4563342, 0.4410422, 0.54668325, 0.5462402)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.42386001348495483, -0.11844000220298767, -0.044477999210357666, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_4" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @A01B_URDF/_geom_4.usda@
                    )
                    {
                        rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_robot_color"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }

                        def Material "material_robot_color_1"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:opacity = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                bool inputs:project_uvw = 1
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }
                    }

                    def Cylinder "_geom_5" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 0
                        custom int condim = 3
                        custom int contype = 0
                        custom float density = 1000
                        float3[] extent = [(-0.04, -0.065, -0.065), (0.04, 0.065, 0.065)]
                        custom float3 friction = (0.8, 0.005, 0.0001)
                        custom float3 geomSize = (0.065, 0.04, 1)
                        custom int group = 4
                        custom bool hasFromto = 0
                        custom bool hasMass = 1
                        double height = 0.07999999821186066
                        custom float margin = 0.001
                        custom float mass = 0
                        custom string material = "robot_color"
                        rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/visuals/Looks/material_robot_color_1>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_5"
                        custom float3 pos = (0, 0.02, 0)
                        custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                        double radius = 0.06499999761581421
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0.019999999552965164, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "fr_joint0" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 1.6
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/trunk_link/trunk_link>
                        rel physics:body1 = </rootPrim/trunk_link/trunk_link/fr_abad>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.42386, -0.11844, -0.844478)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -45.000103
                        float physics:upperLimit = 45.000103
                        float physxJoint:armature = 0
                        float physxLimit:X:damping = 1.6
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "fr_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00344, 0.057962, -0.023227)
                    float3 physics:diagonalInertia = (0.0345519, 0.0324169, 0.00515115)
                    float physics:mass = 4.832
                    quatf physics:principalAxes = (0.98752445, -0.13074607, 0.029794015, -0.08254344)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.1342500001192093, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_6" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @A01B_URDF/_geom_6.usda@
                        )
                        {
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_robot_color"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_1"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_2"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_2/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_2.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_2/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_2/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }
                        }

                        def Cylinder "_geom_7" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            uniform token axis = "Z"
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.068, -0.068, -0.068), (0.068, 0.068, 0.068)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.068, 0.068, 1)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            double height = 0.13600000739097595
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_1>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_7"
                            custom float3 pos = (0, 0.04, 0)
                            custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                            double radius = 0.06800000369548798
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "cylinder"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0.03999999910593033, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Cube "_geom_8" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.072, -0.044, -0.32), (0.072, 0.044, 0.32)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.036, 0.022, 0.16)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/visuals/Looks/material_robot_color_2>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_8"
                            custom float3 pos = (-0.03, 0, -0.18)
                            custom quatf quat = (1, 0, 0, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (0.07199999690055847, 0, 0, 0), (0, 0.04399999976158142, 0, 0), (0, 0, 0.3199999928474426, 0), (-0.029999999329447746, 0, -0.18000000715255737, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "fr_joint1" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 1.6
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, -1, 0)
                            rel physics:body0 = </rootPrim/trunk_link/trunk_link/fr_abad>
                            rel physics:body1 = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.42386, -0.015809998, 0.044478)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -182.00005
                            float physics:upperLimit = 0
                            float physxJoint:armature = 0
                            float physxLimit:X:damping = 1.6
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "fr_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.0167506, 0.000104828, -0.179424)
                        float3 physics:diagonalInertia = (0.0158521, 0.0155591, 0.000377821)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf>,
                            </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf>,
                            </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf>,
                        ]
                        float physics:mass = 0.61
                        quatf physics:principalAxes = (0.7213141, -0.017588902, -0.017636301, 0.69216007)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3499999940395355, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_9" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @A01B_URDF/_geom_9.usda@
                            )
                            {
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/visuals/Looks/material_robot_color>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/visuals/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def Capsule "_geom_10" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "X"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 0
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.22110769, -0.04, -0.04), (0.22110769, 0.04, 0.04)]
                                custom float3 friction = (0.8, 0.005, 0.0001)
                                custom float3 geomSize = (0.04, 0.1811077, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                double height = 0.36221539974212646
                                custom float margin = 0.001
                                custom float mass = 0
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_10"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.18)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.055299904, -0, 0.9984698, 0)
                                double radius = 0.03999999910593033
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "capsule"
                                matrix4d xformOp:transform = ( (0.11043048126327903, 0, -0.9938838648754427, 0), (0, 1, 0, 0), (0.9938838648754427, 0, 0.11043048126327903, 0), (0.019999999552965164, 0, -0.18000000715255737, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }

                                def Material "material_robot_color_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color_1/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }

                            def Sphere "fr" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom float3 friction = (1.6, 0.02, 0.01)
                                custom float3 geomSize = (0.05, 1, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                custom float margin = 0.001
                                custom float mass = 0.05
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/collisions/Looks/material_robot_color_1>
                                custom bool mjcfGeom = 1
                                custom string name = "fr"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (0, 0, -0.37)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3700000047683716, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "sites"
                        {
                            def Sphere "fr_site" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom int group = 0
                                custom bool hasFromto = 0
                                custom string material = ""
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/sites/Looks/material_rgba>
                                custom bool mjcfSite = 1
                                custom string name = "fr_site"
                                custom float3 pos = (0, 0, -0.4)
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 siteSize = (0.05, 0.005, 0.005)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.4000000059604645, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "fr_joint2" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 1.6
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, -1, 0)
                                rel physics:body0 = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh>
                                rel physics:body1 = </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, 0.13425, -0.35)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = 29.83964
                                float physics:upperLimit = 144.23065
                                float physxJoint:armature = 0
                                float physxLimit:X:damping = 1.6
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "fl_abad" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                custom int keyframeIndex = 1
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.014896, -0.015941, 0.000233)
                float3 physics:diagonalInertia = (0.00666332, 0.00556161, 0.00306241)
                float physics:mass = 2.4
                quatf physics:principalAxes = (0.546522, 0.546463, 0.44111, 0.456195)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.42386001348495483, 0.08155699819326401, -0.04447900131344795, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_11" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @A01B_URDF/_geom_11.usda@
                    )
                    {
                        rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_robot_color"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }

                        def Material "material_robot_color_1"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:opacity = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                bool inputs:project_uvw = 1
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }
                    }

                    def Cylinder "_geom_12" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 0
                        custom int condim = 3
                        custom int contype = 0
                        custom float density = 1000
                        float3[] extent = [(-0.04, -0.065, -0.065), (0.04, 0.065, 0.065)]
                        custom float3 friction = (0.8, 0.005, 0.0001)
                        custom float3 geomSize = (0.065, 0.04, 1)
                        custom int group = 4
                        custom bool hasFromto = 0
                        custom bool hasMass = 1
                        double height = 0.07999999821186066
                        custom float margin = 0.001
                        custom float mass = 0
                        custom string material = "robot_color"
                        rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/visuals/Looks/material_robot_color_1>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_12"
                        custom float3 pos = (0, -0.02, 0)
                        custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                        double radius = 0.06499999761581421
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, -0.019999999552965164, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "fl_joint0" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 1.6
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/trunk_link/trunk_link>
                        rel physics:body1 = </rootPrim/trunk_link/trunk_link/fl_abad>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.42386, 0.081557, -0.844479)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -44.75946
                        float physics:upperLimit = 44.75946
                        float physxJoint:armature = 0
                        float physxLimit:X:damping = 1.6
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "fl_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00344, -0.057962, -0.023227)
                    float3 physics:diagonalInertia = (0.0345519, 0.0324169, 0.00515115)
                    float physics:mass = 4.832
                    quatf physics:principalAxes = (0.98752445, 0.13074607, 0.029794015, 0.08254344)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.13429999351501465, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_13" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @A01B_URDF/_geom_13.usda@
                        )
                        {
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_robot_color"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_1"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_2"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_2/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_2.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_2/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_2/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }
                        }

                        def Cylinder "_geom_14" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            uniform token axis = "Z"
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.068, -0.068, -0.068), (0.068, 0.068, 0.068)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.068, 0.068, 1)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            double height = 0.13600000739097595
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_1>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_14"
                            custom float3 pos = (0, -0.04, 0)
                            custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                            double radius = 0.06800000369548798
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "cylinder"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, -0.03999999910593033, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Cube "_geom_15" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.072, -0.044, -0.32), (0.072, 0.044, 0.32)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.036, 0.022, 0.16)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/visuals/Looks/material_robot_color_2>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_15"
                            custom float3 pos = (-0.03, 0, -0.18)
                            custom quatf quat = (1, 0, 0, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (0.07199999690055847, 0, 0, 0), (0, 0.04399999976158142, 0, 0), (0, 0, 0.3199999928474426, 0), (-0.029999999329447746, 0, -0.18000000715255737, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "fl_joint1" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 1.6
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, -1, 0)
                            rel physics:body0 = </rootPrim/trunk_link/trunk_link/fl_abad>
                            rel physics:body1 = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.42386, 0.052742995, 0.044479)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -149.20393
                            float physics:upperLimit = 0
                            float physxJoint:armature = 0
                            float physxLimit:X:damping = 1.6
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "fl_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.01656, -0.000105, -0.179108)
                        float3 physics:diagonalInertia = (0.0158062, 0.0155149, 0.000377068)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf>,
                            </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf>,
                            </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf>,
                        ]
                        float physics:mass = 0.61
                        quatf physics:principalAxes = (0.706202, -0.0170205, -0.0176403, 0.707586)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3499999940395355, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_16" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @A01B_URDF/_geom_16.usda@
                            )
                            {
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/visuals/Looks/material_robot_color>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/visuals/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def Capsule "_geom_17" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "X"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 0
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.22110769, -0.04, -0.04), (0.22110769, 0.04, 0.04)]
                                custom float3 friction = (0.8, 0.005, 0.0001)
                                custom float3 geomSize = (0.04, 0.1811077, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                double height = 0.36221539974212646
                                custom float margin = 0.001
                                custom float mass = 0
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_17"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.18)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.055299904, -0, 0.9984698, 0)
                                double radius = 0.03999999910593033
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "capsule"
                                matrix4d xformOp:transform = ( (0.11043048126327903, 0, -0.9938838648754427, 0), (0, 1, 0, 0), (0.9938838648754427, 0, 0.11043048126327903, 0), (0.019999999552965164, 0, -0.18000000715255737, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }

                                def Material "material_robot_color_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color_1/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }

                            def Sphere "fl" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom float3 friction = (1.6, 0.02, 0.01)
                                custom float3 geomSize = (0.05, 1, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                custom float margin = 0.001
                                custom float mass = 0.05
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/collisions/Looks/material_robot_color_1>
                                custom bool mjcfGeom = 1
                                custom string name = "fl"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (0, 0, -0.37)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3700000047683716, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "sites"
                        {
                            def Sphere "fl_site" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom int group = 0
                                custom bool hasFromto = 0
                                custom string material = ""
                                rel material:binding = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/sites/Looks/material_rgba>
                                custom bool mjcfSite = 1
                                custom string name = "fl_site"
                                custom float3 pos = (0, 0, -0.4)
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 siteSize = (0.05, 0.005, 0.005)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.4000000059604645, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "fl_joint2" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 1.6
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, -1, 0)
                                rel physics:body0 = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh>
                                rel physics:body1 = </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, -0.1343, -0.35)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = 29.83964
                                float physics:upperLimit = 144.23065
                                float physxJoint:armature = 0
                                float physxLimit:X:damping = 1.6
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "hr_abad" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                custom int keyframeIndex = 2
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.014896, 0.015941, 0.000233)
                float3 physics:diagonalInertia = (0.00666332, 0.00556161, 0.00306241)
                float physics:mass = 2.4
                quatf physics:principalAxes = (0.546463, 0.546522, 0.456195, 0.44111)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.31564000248908997, -0.11844000220298767, -0.044477999210357666, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_18" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @A01B_URDF/_geom_18.usda@
                    )
                    {
                        rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_robot_color"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }

                        def Material "material_robot_color_1"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:opacity = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                bool inputs:project_uvw = 1
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }
                    }

                    def Cylinder "_geom_19" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 0
                        custom int condim = 3
                        custom int contype = 0
                        custom float density = 1000
                        float3[] extent = [(-0.04, -0.065, -0.065), (0.04, 0.065, 0.065)]
                        custom float3 friction = (0.8, 0.005, 0.0001)
                        custom float3 geomSize = (0.065, 0.04, 1)
                        custom int group = 4
                        custom bool hasFromto = 0
                        custom bool hasMass = 1
                        double height = 0.07999999821186066
                        custom float margin = 0.001
                        custom float mass = 0
                        custom string material = "robot_color"
                        rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/visuals/Looks/material_robot_color_1>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_19"
                        custom float3 pos = (0, 0.02, 0)
                        custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                        double radius = 0.06499999761581421
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0.019999999552965164, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "hr_joint0" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 1.6
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/trunk_link/trunk_link>
                        rel physics:body1 = </rootPrim/trunk_link/trunk_link/hr_abad>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (-0.31564, -0.11844, -0.844478)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -44.75946
                        float physics:upperLimit = 44.75946
                        float physxJoint:armature = 0
                        float physxLimit:X:damping = 1.6
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "hr_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (0.00344, 0.057962, -0.023227)
                    float3 physics:diagonalInertia = (0.0345519, 0.0324169, 0.00515115)
                    float physics:mass = 4.832
                    quatf physics:principalAxes = (0.98752445, -0.13074607, -0.029794015, 0.08254344)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.13429999351501465, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_20" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @A01B_URDF/_geom_20.usda@
                        )
                        {
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_robot_color"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_1"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_2"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_2/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_2.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_2/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_2/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }
                        }

                        def Cylinder "_geom_21" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            uniform token axis = "Z"
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.068, -0.068, -0.068), (0.068, 0.068, 0.068)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.068, 0.068, 1)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            double height = 0.13600000739097595
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_1>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_21"
                            custom float3 pos = (0, 0.04, 0)
                            custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                            double radius = 0.06800000369548798
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "cylinder"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0.03999999910593033, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Cube "_geom_22" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.072, -0.044, -0.32), (0.072, 0.044, 0.32)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.036, 0.022, 0.16)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/visuals/Looks/material_robot_color_2>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_22"
                            custom float3 pos = (-0.03, 0, -0.18)
                            custom quatf quat = (1, 0, 0, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (0.07199999690055847, 0, 0, 0), (0, 0.04399999976158142, 0, 0), (0, 0, 0.3199999928474426, 0), (-0.029999999329447746, 0, -0.18000000715255737, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "hr_joint1" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 1.6
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, -1, 0)
                            rel physics:body0 = </rootPrim/trunk_link/trunk_link/hr_abad>
                            rel physics:body1 = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0.31564, -0.015859991, 0.044478)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -149.20393
                            float physics:upperLimit = 0
                            float physxJoint:armature = 0
                            float physxLimit:X:damping = 1.6
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "hr_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.01656, 0.000105, -0.179108)
                        float3 physics:diagonalInertia = (0.0158062, 0.0155149, 0.000377068)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf>,
                            </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf>,
                            </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf>,
                        ]
                        float physics:mass = 0.61
                        quatf physics:principalAxes = (0.707586, -0.0176403, -0.0170205, 0.706202)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.006719099823385477, 0, -0.3499400019645691, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_23" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @A01B_URDF/_geom_23.usda@
                            )
                            {
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/visuals/Looks/material_robot_color>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/visuals/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def Capsule "_geom_24" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "X"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 0
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.22110769, -0.04, -0.04), (0.22110769, 0.04, 0.04)]
                                custom float3 friction = (0.8, 0.005, 0.0001)
                                custom float3 geomSize = (0.04, 0.1811077, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                double height = 0.36221539974212646
                                custom float margin = 0.001
                                custom float mass = 0
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_24"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.18)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.055299904, -0, 0.9984698, 0)
                                double radius = 0.03999999910593033
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "capsule"
                                matrix4d xformOp:transform = ( (0.11043048126327903, 0, -0.9938838648754427, 0), (0, 1, 0, 0), (0.9938838648754427, 0, 0.11043048126327903, 0), (0.019999999552965164, 0, -0.18000000715255737, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }

                                def Material "material_robot_color_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color_1/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }

                            def Sphere "hr" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom float3 friction = (1.6, 0.02, 0.01)
                                custom float3 geomSize = (0.05, 1, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                custom float margin = 0.001
                                custom float mass = 0.05
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/collisions/Looks/material_robot_color_1>
                                custom bool mjcfGeom = 1
                                custom string name = "hr"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (0, 0, -0.37)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3700000047683716, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "sites"
                        {
                            def Sphere "hr_site" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom int group = 0
                                custom bool hasFromto = 0
                                custom string material = ""
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/sites/Looks/material_rgba>
                                custom bool mjcfSite = 1
                                custom string name = "hr_site"
                                custom float3 pos = (0, 0, -0.4)
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 siteSize = (0.05, 0.005, 0.005)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.4000000059604645, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "hr_joint2" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 1.6
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, -1, 0)
                                rel physics:body0 = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh>
                                rel physics:body1 = </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0.0067191, 0.1343, -0.34994)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = 29.83964
                                float physics:upperLimit = 144.23065
                                float physxJoint:armature = 0
                                float physxLimit:X:damping = 1.6
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "hl_abad" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                custom int keyframeIndex = 3
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.014896, -0.015941, 0.000233)
                float3 physics:diagonalInertia = (0.00666332, 0.00556161, 0.00306241)
                float physics:mass = 2.4
                quatf physics:principalAxes = (0.44111, 0.456195, 0.546522, 0.546463)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.31564000248908997, 0.08155900239944458, -0.044477999210357666, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_25" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @A01B_URDF/_geom_25.usda@
                    )
                    {
                        rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_robot_color"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }

                        def Material "material_robot_color_1"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                float inputs:metallic = 0.25
                                float inputs:opacity = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 1
                                token outputs:surface
                            }

                            def Shader "diffuseTexture"
                            {
                                uniform token info:id = "UsdUVTexture"
                                asset inputs:file = @A01B_URDF/materials/texture2.png@
                                bool inputs:project_uvw = 1
                                float4 inputs:scale = (1, 1, 1, 1)
                                float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                token inputs:wrapS = "repeat"
                                token inputs:wrapT = "repeat"
                                float3 outputs:rgb
                            }
                        }
                    }

                    def Cylinder "_geom_26" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 0
                        custom int condim = 3
                        custom int contype = 0
                        custom float density = 1000
                        float3[] extent = [(-0.04, -0.065, -0.065), (0.04, 0.065, 0.065)]
                        custom float3 friction = (0.8, 0.005, 0.0001)
                        custom float3 geomSize = (0.065, 0.04, 1)
                        custom int group = 4
                        custom bool hasFromto = 0
                        custom bool hasMass = 1
                        double height = 0.07999999821186066
                        custom float margin = 0.001
                        custom float mass = 0
                        custom string material = "robot_color"
                        rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/visuals/Looks/material_robot_color_1>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_26"
                        custom float3 pos = (0, -0.02, 0)
                        custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                        double radius = 0.06499999761581421
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, -0.019999999552965164, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "hl_joint0" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 1.6
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/trunk_link/trunk_link>
                        rel physics:body1 = </rootPrim/trunk_link/trunk_link/hl_abad>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (-0.31564, 0.081559, -0.844478)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -44.75946
                        float physics:upperLimit = 44.75946
                        float physxJoint:armature = 0
                        float physxLimit:X:damping = 1.6
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "hl_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (0.00344, -0.057962, -0.023227)
                    float3 physics:diagonalInertia = (0.0345519, 0.0324169, 0.00515115)
                    float physics:mass = 4.832
                    quatf physics:principalAxes = (0.98752445, 0.13074607, -0.029794015, -0.08254344)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.1342500001192093, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_27" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @A01B_URDF/_geom_27.usda@
                        )
                        {
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_robot_color"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_1"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_1/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }

                            def Material "material_robot_color_2"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_2/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_2.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_2/diffuseTexture.outputs:rgb>
                                    float inputs:metallic = 0.25
                                    float inputs:opacity = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 1
                                    token outputs:surface
                                }

                                def Shader "diffuseTexture"
                                {
                                    uniform token info:id = "UsdUVTexture"
                                    asset inputs:file = @A01B_URDF/materials/texture2.png@
                                    bool inputs:project_uvw = 1
                                    float4 inputs:scale = (1, 1, 1, 1)
                                    float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_2/stReader.outputs:result>
                                    token inputs:wrapS = "repeat"
                                    token inputs:wrapT = "repeat"
                                    float3 outputs:rgb
                                }
                            }
                        }

                        def Cylinder "_geom_28" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            uniform token axis = "Z"
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.068, -0.068, -0.068), (0.068, 0.068, 0.068)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.068, 0.068, 1)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            double height = 0.13600000739097595
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_1>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_28"
                            custom float3 pos = (0, -0.04, 0)
                            custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                            double radius = 0.06800000369548798
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "cylinder"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, -0.03999999910593033, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Cube "_geom_29" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 0
                            custom int condim = 3
                            custom int contype = 0
                            custom float density = 1000
                            float3[] extent = [(-0.072, -0.044, -0.32), (0.072, 0.044, 0.32)]
                            custom float3 friction = (0.8, 0.005, 0.0001)
                            custom float3 geomSize = (0.036, 0.022, 0.16)
                            custom int group = 4
                            custom bool hasFromto = 0
                            custom bool hasMass = 1
                            custom float margin = 0.001
                            custom float mass = 0
                            custom string material = "robot_color"
                            rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/visuals/Looks/material_robot_color_2>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_29"
                            custom float3 pos = (-0.03, 0, -0.18)
                            custom quatf quat = (1, 0, 0, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (0.07199999690055847, 0, 0, 0), (0, 0.04399999976158142, 0, 0), (0, 0, 0.3199999928474426, 0), (-0.029999999329447746, 0, -0.18000000715255737, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "hl_joint1" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 1.6
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, -1, 0)
                            rel physics:body0 = </rootPrim/trunk_link/trunk_link/hl_abad>
                            rel physics:body1 = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0.31564, 0.052690998, 0.044478)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -149.20393
                            float physics:upperLimit = 0
                            float physxJoint:armature = 0
                            float physxLimit:X:damping = 1.6
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "hl_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.01656, -0.000105, -0.179108)
                        float3 physics:diagonalInertia = (0.0158062, 0.0155149, 0.000377068)
                        prepend rel physics:filteredPairs = [
                            </rootPrim/trunk_link/trunk_link/fr_abad/fr_thigh/fr_calf>,
                            </rootPrim/trunk_link/trunk_link/fl_abad/fl_thigh/fl_calf>,
                            </rootPrim/trunk_link/trunk_link/hr_abad/hr_thigh/hr_calf>,
                        ]
                        float physics:mass = 0.61
                        quatf physics:principalAxes = (0.70925736, -0.016946808, -0.01771091, 0.7045234)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.006719099823385477, 0, -0.3499400019645691, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_30" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @A01B_URDF/_geom_30.usda@
                            )
                            {
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/visuals/Looks/material_robot_color>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/visuals/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/visuals/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/visuals/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/visuals/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }
                        }

                        def "collisions"
                        {
                            def Capsule "_geom_31" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "X"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 0
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.22110769, -0.04, -0.04), (0.22110769, 0.04, 0.04)]
                                custom float3 friction = (0.8, 0.005, 0.0001)
                                custom float3 geomSize = (0.04, 0.1811077, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                double height = 0.36221539974212646
                                custom float margin = 0.001
                                custom float mass = 0
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_31"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.18)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.055299904, -0, 0.9984698, 0)
                                double radius = 0.03999999910593033
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "capsule"
                                matrix4d xformOp:transform = ( (0.11043048126327903, 0, -0.9938838648754427, 0), (0, 1, 0, 0), (0.9938838648754427, 0, 0.11043048126327903, 0), (0.019999999552965164, 0, -0.18000000715255737, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_robot_color"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }

                                def Material "material_robot_color_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color_1/diffuseTexture.outputs:rgb>
                                        float inputs:metallic = 0.25
                                        float inputs:opacity = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 1
                                        token outputs:surface
                                    }

                                    def Shader "diffuseTexture"
                                    {
                                        uniform token info:id = "UsdUVTexture"
                                        asset inputs:file = @A01B_URDF/materials/texture2.png@
                                        bool inputs:project_uvw = 1
                                        float4 inputs:scale = (1, 1, 1, 1)
                                        float2 inputs:st.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color_1/stReader.outputs:result>
                                        token inputs:wrapS = "repeat"
                                        token inputs:wrapT = "repeat"
                                        float3 outputs:rgb
                                    }
                                }
                            }

                            def Sphere "hl" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 3
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom float3 friction = (1.6, 0.02, 0.01)
                                custom float3 geomSize = (0.05, 1, 1)
                                custom int group = 4
                                custom bool hasFromto = 0
                                custom bool hasMass = 1
                                custom float margin = 0.001
                                custom float mass = 0.05
                                custom string material = "robot_color"
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/collisions/Looks/material_robot_color_1>
                                custom bool mjcfGeom = 1
                                custom string name = "hl"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (0, 0, -0.37)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.3700000047683716, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "sites"
                        {
                            def Sphere "hl_site" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                                custom int group = 0
                                custom bool hasFromto = 0
                                custom string material = ""
                                rel material:binding = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/sites/Looks/material_rgba>
                                custom bool mjcfSite = 1
                                custom string name = "hl_site"
                                custom float3 pos = (0, 0, -0.4)
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.05000000074505806
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 siteSize = (0.05, 0.005, 0.005)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.4000000059604645, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "hl_joint2" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 1.6
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, -1, 0)
                                rel physics:body0 = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh>
                                rel physics:body1 = </rootPrim/trunk_link/trunk_link/hl_abad/hl_thigh/hl_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0.0067191, -0.13425, -0.34994)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = 29.83964
                                float physics:upperLimit = 144.23065
                                float physxJoint:armature = 0
                                float physxLimit:X:damping = 1.6
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }
        }
    }

    def Xform "worldBody" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI"]
    )
    {
    }
}

def "actuators"
{
    def "actuator_0"
    {
        custom int actuatorIdx = 1
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fr_joint0", "fr_tau0"]
    }

    def "actuator_1"
    {
        custom int actuatorIdx = 2
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fr_joint1", "fr_tau1"]
    }

    def "actuator_2"
    {
        custom int actuatorIdx = 3
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fr_joint2", "fr_tau2"]
    }

    def "actuator_3"
    {
        custom int actuatorIdx = 4
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fl_joint0", "fl_tau0"]
    }

    def "actuator_4"
    {
        custom int actuatorIdx = 5
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fl_joint1", "fl_tau1"]
    }

    def "actuator_5"
    {
        custom int actuatorIdx = 6
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "fl_joint2", "fl_tau2"]
    }

    def "actuator_6"
    {
        custom int actuatorIdx = 7
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hr_joint0", "hr_tau0"]
    }

    def "actuator_7"
    {
        custom int actuatorIdx = 8
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hr_joint1", "hr_tau1"]
    }

    def "actuator_8"
    {
        custom int actuatorIdx = 9
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hr_joint2", "hr_tau2"]
    }

    def "actuator_9"
    {
        custom int actuatorIdx = 10
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hl_joint0", "hl_tau0"]
    }

    def "actuator_10"
    {
        custom int actuatorIdx = 11
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hl_joint1", "hl_tau1"]
    }

    def "actuator_11"
    {
        custom int actuatorIdx = 12
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-100 100", "hl_joint2", "hl_tau2"]
    }
}

def "tendons"
{
}

def "equalities"
{
}

