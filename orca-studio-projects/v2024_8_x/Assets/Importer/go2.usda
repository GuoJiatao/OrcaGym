#usda 1.0
(
    defaultPrim = "rootPrim"
    metersPerUnit = 1
    upAxis = "Z"
)

def PhysicsScene "physicsScene"
{
    custom float density = 1.225
    custom string integrator = "implicitfast"
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    custom float timestep = 0.001
    custom float viscosity = 0.000018
}

def "keyframe"
{
    def "key_0"
    {
        custom string act = ""
        custom string ctrl = "0 0.9 -1.8 0 0.9 -1.8 0 0.9 -1.8 0 0.9 -1.8"
        custom string mpos = ""
        custom string mquat = ""
        custom string name = "home"
        custom string qpos = "0 0 0.27 1 0 0 0 0 0.9 -1.8 0 0.9 -1.8 0 0.9 -1.8 0 0.9 -1.8"
        custom string qvel = ""
        custom float time = 0
    }
}

def Xform "rootPrim"
{
    def Xform "base"
    {
        def Xform "base" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            custom bool hasFreeJoint = 1
            custom int keyframeIndex = 0
            custom bool mjcfInertial = 1
            custom bool mocap = 0
            point3f physics:centerOfMass = (0.021112, 0, -0.005366)
            float3 physics:diagonalInertia = (0.107027, 0.0980771, 0.0244531)
            float physics:mass = 6.921
            quatf physics:principalAxes = (-0.0005434711, 0.71343505, -0.0017376902, 0.70071906)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.4449999928474426, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "visuals"
            {
                def "_geom_0" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @go2/_geom_0.usda@
                )
                {
                    rel material:binding = </rootPrim/base/base/visuals/Looks/material_black>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_black"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/visuals/Looks/material_black/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0, 0)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0, 0)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/visuals/Looks/material_black_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/visuals/Looks/material_black_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0, 0)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_white"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/visuals/Looks/material_white/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_gray"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/visuals/Looks/material_gray/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }
                }

                def "_geom_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @go2/_geom_1.usda@
                )
                {
                    rel material:binding = </rootPrim/base/base/visuals/Looks/material_black_1>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @go2/_geom_2.usda@
                )
                {
                    rel material:binding = </rootPrim/base/base/visuals/Looks/material_black_2>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @go2/_geom_3.usda@
                )
                {
                    rel material:binding = </rootPrim/base/base/visuals/Looks/material_white>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_4" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @go2/_geom_4.usda@
                )
                {
                    rel material:binding = </rootPrim/base/base/visuals/Looks/material_gray>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "collisions"
            {
                def Cube "_geom_5" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 1
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.3762, -0.0935, -0.114), (0.3762, 0.0935, 0.114)]
                    custom float3 friction = (0.6, 0.005, 0.0001)
                    custom float3 geomSize = (0.1881, 0.04675, 0.057)
                    custom int group = 3
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0.001
                    custom string material = ""
                    rel material:binding = </rootPrim/base/base/collisions/Looks/material_rgba>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_5"
                    uniform token physics:approximation = "boundingCube"
                    custom float3 pos = (0, 0, 0)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.37619999051094055, 0, 0, 0), (0, 0.09350000321865082, 0, 0), (0, 0, 0.11400000005960464, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            float inputs:opacity = 0
                            token outputs:surface
                        }
                    }

                    def Material "material_rgba_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            float inputs:opacity = 0
                            token outputs:surface
                        }
                    }

                    def Material "material_rgba_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            float inputs:opacity = 0
                            token outputs:surface
                        }
                    }
                }

                def Cylinder "_geom_6" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    uniform token axis = "Z"
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 1
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.045, -0.05, -0.05), (0.045, 0.05, 0.05)]
                    custom float3 friction = (0.6, 0.005, 0.0001)
                    custom float3 geomSize = (0.05, 0.045, 1)
                    custom int group = 3
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    double height = 0.09000000357627869
                    custom float margin = 0.001
                    custom string material = ""
                    rel material:binding = </rootPrim/base/base/collisions/Looks/material_rgba_1>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_6"
                    uniform token physics:approximation = "convexHull"
                    custom float3 pos = (0.285, 0, 0.01)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.05000000074505806
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "cylinder"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.2849999964237213, 0, 0.009999999776482582, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Sphere "_geom_7" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 1
                    custom int condim = 1
                    custom int contype = 1
                    custom float density = 1000
                    float3[] extent = [(-0.047, -0.047, -0.047), (0.047, 0.047, 0.047)]
                    custom float3 friction = (0.6, 0.005, 0.0001)
                    custom float3 geomSize = (0.047, 1, 1)
                    custom int group = 3
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0.001
                    custom string material = ""
                    rel material:binding = </rootPrim/base/base/collisions/Looks/material_rgba_2>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_7"
                    uniform token physics:approximation = "boundingSphere"
                    custom float3 pos = (0.293, 0, -0.06)
                    uniform token purpose = "guide"
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.04699999839067459
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "sphere"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.2930000126361847, 0, -0.05999999865889549, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }
            }

            def "sites"
            {
                def Sphere "imu" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/base/base/sites/Looks/material_rgba>
                    custom bool mjcfSite = 1
                    custom string name = "imu"
                    custom float3 pos = (-0.02557, 0, 0.04232)
                    custom quatf quat = (1, 0, 0, 0)
                    double radius = 0.004999999888241291
                    custom float4 rgba = (0.5, 0.5, 0.5, 1)
                    custom float3 siteSize = (0.005, 0.005, 0.005)
                    custom string type = "sphere"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.02556999959051609, 0, 0.042319998145103455, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/base/base/sites/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/base/base/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            token outputs:surface
                        }
                    }
                }
            }

            def Xform "FL_hip" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 0
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.0054, 0.00194, -0.000105)
                float3 physics:diagonalInertia = (0.00088403, 0.000596003, 0.000479967)
                float physics:mass = 0.678
                quatf physics:principalAxes = (0.49701393, 0.49924493, 0.50546193, 0.49823695)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.19339999556541443, 0.04650000110268593, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_8" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_8.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/FL_hip/visuals/Looks/material_metal>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_metal"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FL_hip/visuals/Looks/material_metal/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FL_hip/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }

                        def Material "material_gray"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FL_hip/visuals/Looks/material_gray/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FL_hip/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }
                    }

                    def "_geom_9" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_9.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/FL_hip/visuals/Looks/material_gray>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def "collisions"
                {
                    def Cylinder "_geom_10" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 1
                        custom int condim = 1
                        custom int contype = 1
                        custom float density = 1000
                        float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
                        custom float3 friction = (0.6, 0.005, 0.0001)
                        custom float3 geomSize = (0.046, 0.02, 1)
                        custom int group = 3
                        custom bool hasFromto = 0
                        custom bool hasMass = 0
                        double height = 0.03999999910593033
                        custom float margin = 0.001
                        custom string material = ""
                        rel material:binding = </rootPrim/base/base/FL_hip/collisions/Looks/material_rgba>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_10"
                        uniform token physics:approximation = "convexHull"
                        custom float3 pos = (0, 0.08, 0)
                        uniform token purpose = "guide"
                        custom quatf quat = (0.70710677, 0.70710677, 0, 0)
                        double radius = 0.04600000008940697
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0.07999999821186066, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FL_hip/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FL_hip/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                float inputs:opacity = 0
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "FL_hip_joint" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 2
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/base/base>
                        rel physics:body1 = </rootPrim/base/base/FL_hip>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.1934, 0.0465, -0.445)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -60.000134
                        float physics:upperLimit = 60.000134
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 2
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "FL_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00374, -0.0223, -0.0327)
                    float3 physics:diagonalInertia = (0.00594973, 0.00584149, 0.000878787)
                    float physics:mass = 1.152
                    quatf physics:principalAxes = (0.82953286, 0.08476349, -0.020063197, 0.5516229)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.09549999982118607, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_11" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_11.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_metal>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_metal"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_metal/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }

                            def Material "material_gray"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }
                        }

                        def "_geom_12" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_12.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/visuals/Looks/material_gray>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def "collisions"
                    {
                        def Cube "_geom_13" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 1
                            custom int condim = 1
                            custom int contype = 1
                            custom float density = 1000
                            float3[] extent = [(-0.213, -0.0245, -0.034), (0.213, 0.0245, 0.034)]
                            custom float3 friction = (0.6, 0.005, 0.0001)
                            custom float3 geomSize = (0.1065, 0.01225, 0.017)
                            custom int group = 3
                            custom bool hasFromto = 0
                            custom bool hasMass = 0
                            custom float margin = 0.001
                            custom string material = ""
                            rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/collisions/Looks/material_rgba>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_13"
                            uniform token physics:approximation = "boundingCube"
                            custom float3 pos = (0, 0, -0.1065)
                            uniform token purpose = "guide"
                            custom quatf quat = (0.7071068, 0, 0.7071068, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (-2.861843636724849e-8, 0, -0.2130000281415992, 0), (0, 0.02449999935925007, 0, 0), (0.034000006415945354, 0, -4.568201368752491e-9, 0), (0, 0, -0.10649999976158142, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                    float inputs:opacity = 0
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "FL_thigh_joint" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 2
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, 1, 0)
                            rel physics:body0 = </rootPrim/base/base/FL_hip>
                            rel physics:body1 = </rootPrim/base/base/FL_hip/FL_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.1934, 0.049, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -90.000206
                            float physics:upperLimit = 200.00237
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 2
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "FL_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.00629595, -0.000622121, -0.141417)
                        float3 physics:diagonalInertia = (0.0014901, 0.00146356, 0.0000531397)
                        float physics:mass = 0.241352
                        quatf physics:principalAxes = (0.7106718, 0.0015409894, -0.0045008687, 0.7035078)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_14" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_14.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_gray>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_gray"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }
                            }

                            def "_geom_15" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_15.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_18" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_18.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/visuals/Looks/material_black_1>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def "collisions"
                        {
                            def Cylinder "_geom_16" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.06, -0.012, -0.012), (0.06, 0.012, 0.012)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.012, 0.06, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.11999999731779099
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_16"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.008, 0, -0.06)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99449265, 0, -0.10480696, 0)
                                double radius = 0.012000000104308128
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9780310024266257, 0, 0.20845950204660824, 0), (0, 1, 0, 0), (-0.20845950204660824, 0, 0.9780310024266257, 0), (0.00800000037997961, 0, -0.05999999865889549, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_2"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }
                            }

                            def Cylinder "_geom_17" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.0325, -0.011, -0.011), (0.0325, 0.011, 0.011)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.011, 0.0325, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.06499999761581421
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_1>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_17"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.148)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99968755, 0, 0.024997389, 0)
                                double radius = 0.010999999940395355
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9987502610919617, 0, -0.04997915714230006, 0), (0, 1, 0, 0), (0.04997915714230006, 0, 0.9987502610919617, 0), (0.019999999552965164, 0, -0.14800000190734863, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Sphere "FL" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 6
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.022, -0.022, -0.022), (0.022, 0.022, 0.022)]
                                custom float3 friction = (2, 0.02, 0.01)
                                custom float3 geomSize = (0.022, 1, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf/collisions/Looks/material_rgba_2>
                                custom bool mjcfGeom = 1
                                custom string name = "FL"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (-0.002, 0, -0.213)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.02199999988079071
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000000949949026, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "FL_calf_joint" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 2
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 1, 0)
                                rel physics:body0 = </rootPrim/base/base/FL_hip/FL_thigh>
                                rel physics:body1 = </rootPrim/base/base/FL_hip/FL_thigh/FL_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, -0.0955, -0.213)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -155.99922
                                float physics:upperLimit = -48.00011
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 2
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "FR_hip" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 1
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (-0.0054, -0.00194, -0.000105)
                float3 physics:diagonalInertia = (0.00088403, 0.000596003, 0.000479967)
                float physics:mass = 0.678
                quatf physics:principalAxes = (0.49823695, 0.50546193, 0.49924493, 0.49701393)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.19339999556541443, -0.04650000110268593, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_19" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_19.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/FR_hip/visuals/Looks/material_metal>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1, 0.00009265360131394118, 0), (0, -0.00009265360131394118, -1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_metal"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FR_hip/visuals/Looks/material_metal/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FR_hip/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }

                        def Material "material_gray"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FR_hip/visuals/Looks/material_gray/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FR_hip/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }
                    }

                    def "_geom_20" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_20.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/FR_hip/visuals/Looks/material_gray>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1, 0.00009265360131394118, 0), (0, -0.00009265360131394118, -1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def "collisions"
                {
                    def Cylinder "_geom_21" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 1
                        custom int condim = 1
                        custom int contype = 1
                        custom float density = 1000
                        float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
                        custom float3 friction = (0.6, 0.005, 0.0001)
                        custom float3 geomSize = (0.046, 0.02, 1)
                        custom int group = 3
                        custom bool hasFromto = 0
                        custom bool hasMass = 0
                        double height = 0.03999999910593033
                        custom float margin = 0.001
                        custom string material = ""
                        rel material:binding = </rootPrim/base/base/FR_hip/collisions/Looks/material_rgba>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_21"
                        uniform token physics:approximation = "convexHull"
                        custom float3 pos = (0, -0.08, 0)
                        uniform token purpose = "guide"
                        custom quatf quat = (0.7071068, 0.7071068, 0, 0)
                        double radius = 0.04600000008940697
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.3435885648505064e-7, 1.0000001343588565, 0), (0, -1.0000001343588565, -1.3435885648505064e-7, 0), (0, -0.07999999821186066, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/FR_hip/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/FR_hip/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                float inputs:opacity = 0
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "FR_hip_joint" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 2
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/base/base>
                        rel physics:body1 = </rootPrim/base/base/FR_hip>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.1934, -0.0465, -0.445)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -60.000134
                        float physics:upperLimit = 60.000134
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 2
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "FR_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00374, 0.0223, -0.0327)
                    float3 physics:diagonalInertia = (0.00594973, 0.00584149, 0.000878787)
                    float physics:mass = 1.152
                    quatf physics:principalAxes = (0.5516229, -0.020063197, 0.08476349, 0.82953286)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.09549999982118607, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_22" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_22.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_metal>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_metal"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_metal/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }

                            def Material "material_gray"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }
                        }

                        def "_geom_23" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_23.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/visuals/Looks/material_gray>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def "collisions"
                    {
                        def Cube "_geom_24" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 1
                            custom int condim = 1
                            custom int contype = 1
                            custom float density = 1000
                            float3[] extent = [(-0.213, -0.0245, -0.034), (0.213, 0.0245, 0.034)]
                            custom float3 friction = (0.6, 0.005, 0.0001)
                            custom float3 geomSize = (0.1065, 0.01225, 0.017)
                            custom int group = 3
                            custom bool hasFromto = 0
                            custom bool hasMass = 0
                            custom float margin = 0.001
                            custom string material = ""
                            rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/collisions/Looks/material_rgba>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_24"
                            uniform token physics:approximation = "boundingCube"
                            custom float3 pos = (0, 0, -0.1065)
                            uniform token purpose = "guide"
                            custom quatf quat = (0.7071068, 0, 0.7071068, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (-2.861843636724849e-8, 0, -0.2130000281415992, 0), (0, 0.02449999935925007, 0, 0), (0.034000006415945354, 0, -4.568201368752491e-9, 0), (0, 0, -0.10649999976158142, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                    float inputs:opacity = 0
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "FR_thigh_joint" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 2
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, 1, 0)
                            rel physics:body0 = </rootPrim/base/base/FR_hip>
                            rel physics:body1 = </rootPrim/base/base/FR_hip/FR_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (-0.1934, -0.049, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -90.000206
                            float physics:upperLimit = 200.00237
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 2
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "FR_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.00629595, 0.000622121, -0.141417)
                        float3 physics:diagonalInertia = (0.0014901, 0.00146356, 0.0000531397)
                        float physics:mass = 0.241352
                        quatf physics:principalAxes = (0.70350766, -0.004500868, 0.0015409893, 0.71067166)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_25" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_25.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_gray>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_gray"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }
                            }

                            def "_geom_26" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_26.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_29" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_29.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/visuals/Looks/material_black_1>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def "collisions"
                        {
                            def Cylinder "_geom_27" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.06, -0.013, -0.013), (0.06, 0.013, 0.013)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.013, 0.06, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.11999999731779099
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_27"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.01, 0, -0.06)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99500424, 0, -0.09983342, 0)
                                double radius = 0.013000000268220901
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9800665759394941, 0, 0.1986693545323126, 0), (0, 1, 0, 0), (-0.1986693545323126, 0, 0.9800665759394941, 0), (0.009999999776482582, 0, -0.05999999865889549, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_2"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }
                            }

                            def Cylinder "_geom_28" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.0325, -0.011, -0.011), (0.0325, 0.011, 0.011)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.011, 0.0325, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.06499999761581421
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_1>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_28"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.148)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99968755, 0, 0.024997389, 0)
                                double radius = 0.010999999940395355
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9987502610919617, 0, -0.04997915714230006, 0), (0, 1, 0, 0), (0.04997915714230006, 0, 0.9987502610919617, 0), (0.019999999552965164, 0, -0.14800000190734863, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Sphere "FR" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 6
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.022, -0.022, -0.022), (0.022, 0.022, 0.022)]
                                custom float3 friction = (2, 0.02, 0.01)
                                custom float3 geomSize = (0.022, 1, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf/collisions/Looks/material_rgba_2>
                                custom bool mjcfGeom = 1
                                custom string name = "FR"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (-0.002, 0, -0.213)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.02199999988079071
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000000949949026, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "FR_calf_joint" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 2
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 1, 0)
                                rel physics:body0 = </rootPrim/base/base/FR_hip/FR_thigh>
                                rel physics:body1 = </rootPrim/base/base/FR_hip/FR_thigh/FR_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, 0.0955, -0.213)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -155.99922
                                float physics:upperLimit = -48.00011
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 2
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "RL_hip" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 2
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.0054, 0.00194, -0.000105)
                float3 physics:diagonalInertia = (0.00088403, 0.000596003, 0.000479967)
                float physics:mass = 0.678
                quatf physics:principalAxes = (0.5054619, 0.4982369, 0.49701387, 0.49924487)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.19339999556541443, 0.04650000110268593, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_30" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_30.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/RL_hip/visuals/Looks/material_metal>
                        matrix4d xformOp:transform = ( (-1, 0, -0.00009265360131394118, 0), (0, 1, 0, 0), (0.00009265360131394118, 0, -1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_metal"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RL_hip/visuals/Looks/material_metal/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RL_hip/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }

                        def Material "material_gray"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RL_hip/visuals/Looks/material_gray/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RL_hip/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }
                    }

                    def "_geom_31" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_31.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/RL_hip/visuals/Looks/material_gray>
                        matrix4d xformOp:transform = ( (-1, 0, -0.00009265360131394118, 0), (0, 1, 0, 0), (0.00009265360131394118, 0, -1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def "collisions"
                {
                    def Cylinder "_geom_32" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 1
                        custom int condim = 1
                        custom int contype = 1
                        custom float density = 1000
                        float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
                        custom float3 friction = (0.6, 0.005, 0.0001)
                        custom float3 geomSize = (0.046, 0.02, 1)
                        custom int group = 3
                        custom bool hasFromto = 0
                        custom bool hasMass = 0
                        double height = 0.03999999910593033
                        custom float margin = 0.001
                        custom string material = ""
                        rel material:binding = </rootPrim/base/base/RL_hip/collisions/Looks/material_rgba>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_32"
                        uniform token physics:approximation = "convexHull"
                        custom float3 pos = (0, 0.08, 0)
                        uniform token purpose = "guide"
                        custom quatf quat = (0.7071068, 0.7071068, 0, 0)
                        double radius = 0.04600000008940697
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.3435885648505064e-7, 1.0000001343588565, 0), (0, -1.0000001343588565, -1.3435885648505064e-7, 0), (0, 0.07999999821186066, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RL_hip/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RL_hip/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                float inputs:opacity = 0
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "RL_hip_joint" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 2
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/base/base>
                        rel physics:body1 = </rootPrim/base/base/RL_hip>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (-0.1934, 0.0465, -0.445)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -60.000134
                        float physics:upperLimit = 60.000134
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 2
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "RL_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00374, -0.0223, -0.0327)
                    float3 physics:diagonalInertia = (0.00594973, 0.00584149, 0.000878787)
                    float physics:mass = 1.152
                    quatf physics:principalAxes = (0.82953286, 0.08476349, -0.020063197, 0.5516229)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.09549999982118607, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_33" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_33.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_metal>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_metal"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_metal/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }

                            def Material "material_gray"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }
                        }

                        def "_geom_34" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_34.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/visuals/Looks/material_gray>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def "collisions"
                    {
                        def Cube "_geom_35" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 1
                            custom int condim = 1
                            custom int contype = 1
                            custom float density = 1000
                            float3[] extent = [(-0.213, -0.0245, -0.034), (0.213, 0.0245, 0.034)]
                            custom float3 friction = (0.6, 0.005, 0.0001)
                            custom float3 geomSize = (0.1065, 0.01225, 0.017)
                            custom int group = 3
                            custom bool hasFromto = 0
                            custom bool hasMass = 0
                            custom float margin = 0.001
                            custom string material = ""
                            rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/collisions/Looks/material_rgba>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_35"
                            uniform token physics:approximation = "boundingCube"
                            custom float3 pos = (0, 0, -0.1065)
                            uniform token purpose = "guide"
                            custom quatf quat = (0.7071068, 0, 0.7071068, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (-2.861843636724849e-8, 0, -0.2130000281415992, 0), (0, 0.02449999935925007, 0, 0), (0.034000006415945354, 0, -4.568201368752491e-9, 0), (0, 0, -0.10649999976158142, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                    float inputs:opacity = 0
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "RL_thigh_joint" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 2
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, 1, 0)
                            rel physics:body0 = </rootPrim/base/base/RL_hip>
                            rel physics:body1 = </rootPrim/base/base/RL_hip/RL_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0.1934, 0.049, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -30.000067
                            float physics:upperLimit = 260.0025
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 2
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "RL_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.00629595, -0.000622121, -0.141417)
                        float3 physics:diagonalInertia = (0.0014901, 0.00146356, 0.0000531397)
                        float physics:mass = 0.241352
                        quatf physics:principalAxes = (0.7106718, 0.0015409894, -0.0045008687, 0.7035078)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_36" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_36.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_gray>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_gray"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }
                            }

                            def "_geom_37" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_37.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_40" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_40.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/visuals/Looks/material_black_1>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def "collisions"
                        {
                            def Cylinder "_geom_38" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.06, -0.013, -0.013), (0.06, 0.013, 0.013)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.013, 0.06, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.11999999731779099
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_38"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.01, 0, -0.06)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99500424, 0, -0.09983342, 0)
                                double radius = 0.013000000268220901
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9800665759394941, 0, 0.1986693545323126, 0), (0, 1, 0, 0), (-0.1986693545323126, 0, 0.9800665759394941, 0), (0.009999999776482582, 0, -0.05999999865889549, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_2"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }
                            }

                            def Cylinder "_geom_39" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.0325, -0.011, -0.011), (0.0325, 0.011, 0.011)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.011, 0.0325, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.06499999761581421
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_1>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_39"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.148)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99968755, 0, 0.024997389, 0)
                                double radius = 0.010999999940395355
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9987502610919617, 0, -0.04997915714230006, 0), (0, 1, 0, 0), (0.04997915714230006, 0, 0.9987502610919617, 0), (0.019999999552965164, 0, -0.14800000190734863, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Sphere "RL" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 6
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.022, -0.022, -0.022), (0.022, 0.022, 0.022)]
                                custom float3 friction = (2, 0.02, 0.01)
                                custom float3 geomSize = (0.022, 1, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf/collisions/Looks/material_rgba_2>
                                custom bool mjcfGeom = 1
                                custom string name = "RL"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (-0.002, 0, -0.213)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.02199999988079071
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000000949949026, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "RL_calf_joint" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 2
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 1, 0)
                                rel physics:body0 = </rootPrim/base/base/RL_hip/RL_thigh>
                                rel physics:body1 = </rootPrim/base/base/RL_hip/RL_thigh/RL_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, -0.0955, -0.213)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -155.99922
                                float physics:upperLimit = -48.00011
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 2
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }

            def Xform "RR_hip" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 3
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.0054, -0.00194, -0.000105)
                float3 physics:diagonalInertia = (0.00088403, 0.000596003, 0.000479967)
                float physics:mass = 0.678
                quatf physics:principalAxes = (0.49924493, 0.49701393, 0.49823695, 0.50546193)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.19339999556541443, -0.04650000110268593, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_41" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_41.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/RR_hip/visuals/Looks/material_metal>
                        matrix4d xformOp:transform = ( (-1.0000000042923447, 5.101307699727925e-15, -0.00009265360151279156, 0), (8.584684735135063e-9, -1.0000000042923447, -0.0000926536011150908, 0), (-0.0000926536011150908, -0.00009265360151279156, 0.9999999914153102, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_metal"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RR_hip/visuals/Looks/material_metal/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RR_hip/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }

                        def Material "material_gray"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RR_hip/visuals/Looks/material_gray/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RR_hip/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }
                    }

                    def "_geom_42" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @go2/_geom_42.usda@
                    )
                    {
                        rel material:binding = </rootPrim/base/base/RR_hip/visuals/Looks/material_gray>
                        matrix4d xformOp:transform = ( (-1.0000000042923447, 5.101307699727925e-15, -0.00009265360151279156, 0), (8.584684735135063e-9, -1.0000000042923447, -0.0000926536011150908, 0), (-0.0000926536011150908, -0.00009265360151279156, 0.9999999914153102, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def "collisions"
                {
                    def Cylinder "_geom_43" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    )
                    {
                        uniform token axis = "Z"
                        custom float4 axisangle = (0, 0, 0, 0)
                        custom int conaffinity = 1
                        custom int condim = 1
                        custom int contype = 1
                        custom float density = 1000
                        float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
                        custom float3 friction = (0.6, 0.005, 0.0001)
                        custom float3 geomSize = (0.046, 0.02, 1)
                        custom int group = 3
                        custom bool hasFromto = 0
                        custom bool hasMass = 0
                        double height = 0.03999999910593033
                        custom float margin = 0.001
                        custom string material = ""
                        rel material:binding = </rootPrim/base/base/RR_hip/collisions/Looks/material_rgba>
                        custom bool mjcfGeom = 1
                        custom string name = "_geom_43"
                        uniform token physics:approximation = "convexHull"
                        custom float3 pos = (0, -0.08, 0)
                        uniform token purpose = "guide"
                        custom quatf quat = (0.7071068, 0.7071068, 0, 0)
                        double radius = 0.04600000008940697
                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                        custom float3 solimp = (0.9, 0.95, 0.001)
                        custom float2 solref = (0.02, 1)
                        custom string type = "cylinder"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.3435885648505064e-7, 1.0000001343588565, 0), (0, -1.0000001343588565, -1.3435885648505064e-7, 0), (0, -0.07999999821186066, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                        custom float3 zaxis = (0, 0, 0)
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/base/base/RR_hip/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/base/base/RR_hip/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                float inputs:opacity = 0
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "RR_hip_joint" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 2
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (1, 0, 0)
                        rel physics:body0 = </rootPrim/base/base>
                        rel physics:body1 = </rootPrim/base/base/RR_hip>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (-0.1934, -0.0465, -0.445)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -60.000134
                        float physics:upperLimit = 60.000134
                        float physxJoint:armature = 0.01
                        float physxLimit:X:damping = 2
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "RR_thigh" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.00374, 0.0223, -0.0327)
                    float3 physics:diagonalInertia = (0.00594973, 0.00584149, 0.000878787)
                    float physics:mass = 1.152
                    quatf physics:principalAxes = (0.5516229, -0.020063197, 0.08476349, 0.82953286)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.09549999982118607, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_44" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_44.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_metal>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_metal"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_metal/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_metal.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.9, 0.95, 0.95)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }

                            def Material "material_gray"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }
                        }

                        def "_geom_45" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @go2/_geom_45.usda@
                        )
                        {
                            rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/visuals/Looks/material_gray>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def "collisions"
                    {
                        def Cube "_geom_46" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        )
                        {
                            custom float4 axisangle = (0, 0, 0, 0)
                            custom int conaffinity = 1
                            custom int condim = 1
                            custom int contype = 1
                            custom float density = 1000
                            float3[] extent = [(-0.213, -0.0245, -0.034), (0.213, 0.0245, 0.034)]
                            custom float3 friction = (0.6, 0.005, 0.0001)
                            custom float3 geomSize = (0.1065, 0.01225, 0.017)
                            custom int group = 3
                            custom bool hasFromto = 0
                            custom bool hasMass = 0
                            custom float margin = 0.001
                            custom string material = ""
                            rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/collisions/Looks/material_rgba>
                            custom bool mjcfGeom = 1
                            custom string name = "_geom_46"
                            uniform token physics:approximation = "boundingCube"
                            custom float3 pos = (0, 0, -0.1065)
                            uniform token purpose = "guide"
                            custom quatf quat = (0.7071068, 0, 0.7071068, 0)
                            custom float4 rgba = (0.5, 0.5, 0.5, 1)
                            custom float3 solimp = (0.9, 0.95, 0.001)
                            custom float2 solref = (0.02, 1)
                            custom string type = "box"
                            matrix4d xformOp:transform = ( (-2.861843636724849e-8, 0, -0.2130000281415992, 0), (0, 0.02449999935925007, 0, 0), (0.034000006415945354, 0, -4.568201368752491e-9, 0), (0, 0, -0.10649999976158142, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                            custom float3 zaxis = (0, 0, 0)
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                    float inputs:opacity = 0
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "RR_thigh_joint" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 2
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, 1, 0)
                            rel physics:body0 = </rootPrim/base/base/RR_hip>
                            rel physics:body1 = </rootPrim/base/base/RR_hip/RR_thigh>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0.1934, -0.049, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = -30.000067
                            float physics:upperLimit = 260.0025
                            float physxJoint:armature = 0.01
                            float physxLimit:X:damping = 2
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "RR_calf" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.00629595, 0.000622121, -0.141417)
                        float3 physics:diagonalInertia = (0.0014901, 0.00146356, 0.0000531397)
                        float physics:mass = 0.241352
                        quatf physics:principalAxes = (0.70350766, -0.004500868, 0.0015409893, 0.71067166)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_47" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_47.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_gray>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_gray"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_gray/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_gray.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.671705, 0.692426, 0.77427)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0, 0, 0)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }
                            }

                            def "_geom_48" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_48.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_51" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @go2/_geom_51.usda@
                            )
                            {
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/visuals/Looks/material_black_1>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def "collisions"
                        {
                            def Cylinder "_geom_49" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.06, -0.013, -0.013), (0.06, 0.013, 0.013)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.013, 0.06, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.11999999731779099
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_49"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.01, 0, -0.06)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99500424, 0, -0.09983342, 0)
                                double radius = 0.013000000268220901
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9800665759394941, 0, 0.1986693545323126, 0), (0, 1, 0, 0), (-0.1986693545323126, 0, 0.9800665759394941, 0), (0.009999999776482582, 0, -0.05999999865889549, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }

                                def Material "material_rgba_2"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }
                            }

                            def Cylinder "_geom_50" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                uniform token axis = "Z"
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 1
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.0325, -0.011, -0.011), (0.0325, 0.011, 0.011)]
                                custom float3 friction = (0.6, 0.005, 0.0001)
                                custom float3 geomSize = (0.011, 0.0325, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                double height = 0.06499999761581421
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_1>
                                custom bool mjcfGeom = 1
                                custom string name = "_geom_50"
                                uniform token physics:approximation = "convexHull"
                                custom float3 pos = (0.02, 0, -0.148)
                                uniform token purpose = "guide"
                                custom quatf quat = (0.99968755, 0, 0.024997389, 0)
                                double radius = 0.010999999940395355
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.9, 0.95, 0.001)
                                custom float2 solref = (0.02, 1)
                                custom string type = "cylinder"
                                matrix4d xformOp:transform = ( (0.9987502610919617, 0, -0.04997915714230006, 0), (0, 1, 0, 0), (0.04997915714230006, 0, 0.9987502610919617, 0), (0.019999999552965164, 0, -0.14800000190734863, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }

                            def Sphere "RR" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            )
                            {
                                custom float4 axisangle = (0, 0, 0, 0)
                                custom int conaffinity = 1
                                custom int condim = 6
                                custom int contype = 1
                                custom float density = 1000
                                float3[] extent = [(-0.022, -0.022, -0.022), (0.022, 0.022, 0.022)]
                                custom float3 friction = (2, 0.02, 0.01)
                                custom float3 geomSize = (0.022, 1, 1)
                                custom int group = 3
                                custom bool hasFromto = 0
                                custom bool hasMass = 0
                                custom float margin = 0.001
                                custom string material = ""
                                rel material:binding = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf/collisions/Looks/material_rgba_2>
                                custom bool mjcfGeom = 1
                                custom string name = "RR"
                                uniform token physics:approximation = "boundingSphere"
                                custom float3 pos = (-0.002, 0, -0.213)
                                uniform token purpose = "guide"
                                custom quatf quat = (1, 0, 0, 0)
                                double radius = 0.02199999988079071
                                custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                custom float3 solimp = (0.015, 1, 0.031)
                                custom float2 solref = (0.02, 1)
                                custom string type = "sphere"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000000949949026, 0, -0.21299999952316284, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                custom float3 zaxis = (0, 0, 0)
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "RR_calf_joint" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 2
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 1, 0)
                                rel physics:body0 = </rootPrim/base/base/RR_hip/RR_thigh>
                                rel physics:body1 = </rootPrim/base/base/RR_hip/RR_thigh/RR_calf>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, 0.0955, -0.213)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (1, 0, 0, 0)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = -155.99922
                                float physics:upperLimit = -48.00011
                                float physxJoint:armature = 0.01
                                float physxLimit:X:damping = 2
                                float physxLimit:X:stiffness = 0
                            }
                        }
                    }
                }
            }
        }
    }

    def Xform "worldBody" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI"]
    )
    {
    }
}

def "actuators"
{
    def "actuator_0"
    {
        custom int actuatorIdx = 1
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "FR_hip_joint", "FR_hip"]
    }

    def "actuator_1"
    {
        custom int actuatorIdx = 2
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "FR_thigh_joint", "FR_thigh"]
    }

    def "actuator_2"
    {
        custom int actuatorIdx = 3
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-45.43 45.43", "FR_calf_joint", "FR_calf"]
    }

    def "actuator_3"
    {
        custom int actuatorIdx = 4
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "FL_hip_joint", "FL_hip"]
    }

    def "actuator_4"
    {
        custom int actuatorIdx = 5
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "FL_thigh_joint", "FL_thigh"]
    }

    def "actuator_5"
    {
        custom int actuatorIdx = 6
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-45.43 45.43", "FL_calf_joint", "FL_calf"]
    }

    def "actuator_6"
    {
        custom int actuatorIdx = 7
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "RR_hip_joint", "RR_hip"]
    }

    def "actuator_7"
    {
        custom int actuatorIdx = 8
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "RR_thigh_joint", "RR_thigh"]
    }

    def "actuator_8"
    {
        custom int actuatorIdx = 9
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-45.43 45.43", "RR_calf_joint", "RR_calf"]
    }

    def "actuator_9"
    {
        custom int actuatorIdx = 10
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "RL_hip_joint", "RL_hip"]
    }

    def "actuator_10"
    {
        custom int actuatorIdx = 11
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-23.7 23.7", "RL_thigh_joint", "RL_thigh"]
    }

    def "actuator_11"
    {
        custom int actuatorIdx = 12
        custom int actuatorType = 0
        custom string[] keys = ["ctrlrange", "joint", "name"]
        custom string[] values = ["-45.43 45.43", "RL_calf_joint", "RL_calf"]
    }
}

def "tendons"
{
}

def "equalities"
{
}

