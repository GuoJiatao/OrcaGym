#usda 1.0
(
    defaultPrim = "rootPrim"
    metersPerUnit = 1
    upAxis = "Z"
)

def PhysicsScene "physicsScene"
{
    custom float density = 1.225
    custom string integrator = "implicitfast"
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    custom float timestep = 0.001
    custom float viscosity = 0.000018
}

def Xform "rootPrim"
{
    def Xform "panda_mocap"
    {
        def Xform "panda_mocap" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            custom int keyframeIndex = 0
            custom bool mocap = 1
            float physics:density = 1000
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.6000000238418579, 0, 0.4000000059604645, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "joints"
            {
                def PhysicsFixedJoint "rootJoint_panda_mocap"
                {
                    rel physics:body1 = </rootPrim/panda_mocap/panda_mocap/panda_mocap>
                }
            }

            def "visuals"
            {
                def Cube "_geom_0" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 0
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
                    custom float3 friction = (1, 0.005, 0.0001)
                    custom float3 geomSize = (0.005, 0.005, 0.005)
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_0"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0, 0.5, 0, 0.7)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.009999999776482582, 0, 0, 0), (0, 0.009999999776482582, 0, 0), (0, 0, 0.009999999776482582, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0.5, 0)
                            token outputs:surface
                        }
                    }

                    def Material "material_rgba_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0.5, 0)
                            token outputs:surface
                        }
                    }

                    def Material "material_rgba_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0.5, 0)
                            token outputs:surface
                        }
                    }

                    def Material "material_rgba_3"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_3/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_3.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0, 0.5, 0)
                            token outputs:surface
                        }
                    }
                }

                def Cube "_geom_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 0
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-1, -0.01, -0.01), (1, 0.01, 0.01)]
                    custom float3 friction = (1, 0.005, 0.0001)
                    custom float3 geomSize = (0.5, 0.005, 0.005)
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_1>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_1"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0, 0.5, 0, 0.1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.009999999776482582, 0, 0), (0, 0, 0.009999999776482582, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "_geom_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 0
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.01, -1, -0.002), (0.01, 1, 0.002)]
                    custom float3 friction = (1, 0.005, 0.0001)
                    custom float3 geomSize = (0.005, 0.5, 0.001)
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_2>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_2"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0, 0.5, 0, 0.1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.009999999776482582, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0.0020000000949949026, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }

                def Cube "_geom_3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    custom float4 axisangle = (0, 0, 0, 0)
                    custom int conaffinity = 0
                    custom int condim = 3
                    custom int contype = 0
                    custom float density = 1000
                    float3[] extent = [(-0.01, -0.01, -1), (0.01, 0.01, 1)]
                    custom float3 friction = (1, 0.005, 0.0001)
                    custom float3 geomSize = (0.005, 0.005, 0.5)
                    custom int group = 0
                    custom bool hasFromto = 0
                    custom bool hasMass = 0
                    custom float margin = 0
                    custom string material = ""
                    rel material:binding = </rootPrim/panda_mocap/panda_mocap/visuals/Looks/material_rgba_3>
                    custom bool mjcfGeom = 1
                    custom string name = "_geom_3"
                    custom float3 pos = (0, 0, 0)
                    custom quatf quat = (1, 0, 0, 0)
                    custom float4 rgba = (0, 0.5, 0, 0.1)
                    custom float3 solimp = (0.9, 0.95, 0.001)
                    custom float2 solref = (0.02, 1)
                    custom string type = "box"
                    matrix4d xformOp:transform = ( (0.009999999776482582, 0, 0, 0), (0, 0.009999999776482582, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                    custom float3 zaxis = (0, 0, 0)
                }
            }
        }
    }

    def Xform "link0"
    {
        def Xform "link0" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            custom int keyframeIndex = 1
            custom bool mjcfInertial = 1
            custom bool mocap = 0
            point3f physics:centerOfMass = (-0.041018, -0.00014, 0.049974)
            float3 physics:diagonalInertia = (0.0031305107, 0.003879839, 0.0043046502)
            float physics:mass = 0.629769
            quatf physics:principalAxes = (0.9978668, -0.009703253, 0.064553544, 0.00078701053)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "joints"
            {
                def PhysicsFixedJoint "rootJoint_link0"
                {
                    rel physics:body1 = </rootPrim/link0/link0/link0>
                }
            }

            def "visuals"
            {
                def "_geom_4" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_4.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_off_white>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_off_white"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_black/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_off_white_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_off_white_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_black_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_black_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_white"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_white/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_white_1"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_black_3"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_black_3/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_black_3.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_off_white_3"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_3/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_off_white_3.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }

                    def Material "material_white_2"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/visuals/Looks/material_white_2/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/visuals/Looks/material_white_2.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 0
                            float inputs:roughness = 0.5
                            float inputs:specular_level = 0.5
                            token outputs:surface
                        }
                    }
                }

                def "_geom_5" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_5.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_black>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_6" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_6.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_off_white_1>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_7" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_7.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_black_1>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_8" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_8.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_off_white_2>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_9" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_9.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_black_2>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_10" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_10.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_white>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_11" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_11.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_white_1>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_12" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_12.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_black_3>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_13" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_13.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_off_white_3>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def "_geom_14" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_14.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/visuals/Looks/material_white_2>
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "collisions"
            {
                def "_geom_15" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_15.usda@
                )
                {
                    rel material:binding = </rootPrim/link0/link0/collisions/Looks/material_rgba>
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token inputs:frame:stPrimvarName = "st"
                        token outputs:surface.connect = </rootPrim/link0/link0/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                        def Shader "stReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </rootPrim/link0/link0/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }

                        def Shader "PBRShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                            float inputs:opacity = 0
                            token outputs:surface
                        }
                    }
                }
            }

            def Xform "link1" (
                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
            )
            {
                custom int keyframeIndex = 0
                custom bool mjcfInertial = 1
                custom bool mocap = 0
                point3f physics:centerOfMass = (0.003875, 0.002081, -0.04762)
                float3 physics:diagonalInertia = (0.7034354, 0.707137, 0.008524556)
                float physics:mass = 4.970684
                quatf physics:principalAxes = (0.99987346, 0.013757257, -0.0047861394, -0.0064090537)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.3330000042915344, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def "visuals"
                {
                    def "_geom_16" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_16.usda@
                    )
                    {
                        rel material:binding = </rootPrim/link0/link0/link1/visuals/Looks/material_white>
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_white"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/link0/link0/link1/visuals/Looks/material_white/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/link0/link0/link1/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (1, 1, 1)
                                float inputs:metallic = 0
                                float inputs:roughness = 0.5
                                float inputs:specular_level = 0.5
                                token outputs:surface
                            }
                        }
                    }
                }

                def "collisions"
                {
                    def "_geom_17" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_17.usda@
                    )
                    {
                        rel material:binding = </rootPrim/link0/link0/link1/collisions/Looks/material_rgba>
                        uniform token physics:approximation = "convexHull"
                        uniform token purpose = "guide"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Scope "Looks"
                    {
                        def Material "material_rgba"
                        {
                            token inputs:frame:stPrimvarName = "st"
                            token outputs:surface.connect = </rootPrim/link0/link0/link1/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                            def Shader "stReader"
                            {
                                uniform token info:id = "UsdPrimvarReader_float2"
                                token inputs:varname.connect = </rootPrim/link0/link0/link1/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                float2 outputs:result
                            }

                            def Shader "PBRShader"
                            {
                                uniform token info:id = "UsdPreviewSurface"
                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                float inputs:opacity = 0
                                token outputs:surface
                            }
                        }
                    }
                }

                def "joints"
                {
                    def PhysicsRevoluteJoint "joint1" (
                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                    )
                    {
                        float drive:X:physics:damping = 1
                        float drive:X:physics:stiffness = 0
                        uniform token drive:X:physics:type = "force"
                        custom int keyframeIndex = 0
                        custom bool limited = 1
                        float3 physics:axisVector = (0, 0, 1)
                        rel physics:body0 = </rootPrim/link0/link0>
                        rel physics:body1 = </rootPrim/link0/link0/link1>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0, 0, 0.333)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = -166.00305
                        float physics:upperLimit = 166.00305
                        float physxJoint:armature = 0.1
                        float physxLimit:X:damping = 1
                        float physxLimit:X:stiffness = 0
                    }
                }

                def Xform "link2" (
                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                )
                {
                    custom int keyframeIndex = 0
                    custom bool mjcfInertial = 1
                    custom bool mocap = 0
                    point3f physics:centerOfMass = (-0.003141, -0.02872, 0.003495)
                    float3 physics:diagonalInertia = (0.0027342497, 0.028300105, 0.031032642)
                    float physics:mass = 0.646926
                    quatf physics:principalAxes = (0.95345795, 0.20580515, 0.21802837, 0.032029983)
                    matrix4d xformOp:transform = ( (1, 0, -0, 0), (-0, 3.422854177870249e-8, -0.9999999657714582, 0), (0, 0.9999999657714582, 3.422854177870249e-8, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def "visuals"
                    {
                        def "_geom_18" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_18.usda@
                        )
                        {
                            rel material:binding = </rootPrim/link0/link0/link1/link2/visuals/Looks/material_white>
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_white"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/visuals/Looks/material_white/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (1, 1, 1)
                                    float inputs:metallic = 0
                                    float inputs:roughness = 0.5
                                    float inputs:specular_level = 0.5
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "collisions"
                    {
                        def "_geom_19" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_19.usda@
                        )
                        {
                            rel material:binding = </rootPrim/link0/link0/link1/link2/collisions/Looks/material_rgba>
                            uniform token physics:approximation = "convexHull"
                            uniform token purpose = "guide"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Scope "Looks"
                        {
                            def Material "material_rgba"
                            {
                                token inputs:frame:stPrimvarName = "st"
                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                def Shader "stReader"
                                {
                                    uniform token info:id = "UsdPrimvarReader_float2"
                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                    float2 outputs:result
                                }

                                def Shader "PBRShader"
                                {
                                    uniform token info:id = "UsdPreviewSurface"
                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                    float inputs:opacity = 0
                                    token outputs:surface
                                }
                            }
                        }
                    }

                    def "joints"
                    {
                        def PhysicsRevoluteJoint "joint2" (
                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                        )
                        {
                            float drive:X:physics:damping = 1
                            float drive:X:physics:stiffness = 0
                            uniform token drive:X:physics:type = "force"
                            custom int keyframeIndex = 0
                            custom bool limited = 1
                            float3 physics:axisVector = (0, 0, 1)
                            rel physics:body0 = </rootPrim/link0/link0/link1>
                            rel physics:body1 = </rootPrim/link0/link0/link1/link2>
                            float physics:breakForce = 3.4028235e38
                            float physics:breakTorque = 3.4028235e38
                            point3f physics:localPos0 = (0, 0, -0.333)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
                            quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                            float physics:lowerLimit = -101.00099
                            float physics:upperLimit = 101.00099
                            float physxJoint:armature = 0.1
                            float physxLimit:X:damping = 1
                            float physxLimit:X:stiffness = 0
                        }
                    }

                    def Xform "link3" (
                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                    )
                    {
                        custom int keyframeIndex = 0
                        custom bool mjcfInertial = 1
                        custom bool mocap = 0
                        point3f physics:centerOfMass = (0.027518, 0.039252, -0.066502)
                        float3 physics:diagonalInertia = (0.04147926, 0.04150139, 0.0012463537)
                        float physics:mass = 3.228604
                        quatf physics:principalAxes = (0.967227, -0.18302687, 0.17343004, 0.029919751)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, -0.3160000145435333, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def "visuals"
                        {
                            def "_geom_20" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_20.usda@
                            )
                            {
                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_white"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (1, 1, 1)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_white_1"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (1, 1, 1)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_white_2"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_2/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_2.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (1, 1, 1)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }

                                def Material "material_black"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_black/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                        float inputs:metallic = 0
                                        float inputs:roughness = 0.5
                                        float inputs:specular_level = 0.5
                                        token outputs:surface
                                    }
                                }
                            }

                            def "_geom_21" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_21.usda@
                            )
                            {
                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_1>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_22" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_22.usda@
                            )
                            {
                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_white_2>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def "_geom_23" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_23.usda@
                            )
                            {
                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/visuals/Looks/material_black>
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def "collisions"
                        {
                            def "_geom_24" (
                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_24.usda@
                            )
                            {
                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/collisions/Looks/material_rgba>
                                uniform token physics:approximation = "convexHull"
                                uniform token purpose = "guide"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Scope "Looks"
                            {
                                def Material "material_rgba"
                                {
                                    token inputs:frame:stPrimvarName = "st"
                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                    def Shader "stReader"
                                    {
                                        uniform token info:id = "UsdPrimvarReader_float2"
                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                        float2 outputs:result
                                    }

                                    def Shader "PBRShader"
                                    {
                                        uniform token info:id = "UsdPreviewSurface"
                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                        float inputs:opacity = 0
                                        token outputs:surface
                                    }
                                }
                            }
                        }

                        def "joints"
                        {
                            def PhysicsRevoluteJoint "joint3" (
                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                            )
                            {
                                float drive:X:physics:damping = 1
                                float drive:X:physics:stiffness = 0
                                uniform token drive:X:physics:type = "force"
                                custom int keyframeIndex = 0
                                custom bool limited = 1
                                float3 physics:axisVector = (0, 0, 1)
                                rel physics:body0 = </rootPrim/link0/link0/link1/link2>
                                rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3>
                                float physics:breakForce = 3.4028235e38
                                float physics:breakTorque = 3.4028235e38
                                point3f physics:localPos0 = (0, 1.8835069e-8, -0.31599998)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0, 0.99999994, 0, 0)
                                quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                                float physics:lowerLimit = -166.00305
                                float physics:upperLimit = 166.00305
                                float physxJoint:armature = 0.1
                                float physxLimit:X:damping = 1
                                float physxLimit:X:stiffness = 0
                            }
                        }

                        def Xform "link4" (
                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                        )
                        {
                            custom int keyframeIndex = 0
                            custom bool mjcfInertial = 1
                            custom bool mocap = 0
                            point3f physics:centerOfMass = (-0.05317, 0.104419, 0.027454)
                            float3 physics:diagonalInertia = (0.028148277, 0.010620085, 0.034959644)
                            float physics:mass = 3.587895
                            quatf physics:principalAxes = (0.90606153, -0.28003642, 0.27434063, 0.15927777)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0.08250000327825546, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def "visuals"
                            {
                                def "_geom_25" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_25.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_white"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (1, 1, 1)
                                            float inputs:metallic = 0
                                            float inputs:roughness = 0.5
                                            float inputs:specular_level = 0.5
                                            token outputs:surface
                                        }
                                    }

                                    def Material "material_white_1"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (1, 1, 1)
                                            float inputs:metallic = 0
                                            float inputs:roughness = 0.5
                                            float inputs:specular_level = 0.5
                                            token outputs:surface
                                        }
                                    }

                                    def Material "material_black"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_black/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                            float inputs:metallic = 0
                                            float inputs:roughness = 0.5
                                            float inputs:specular_level = 0.5
                                            token outputs:surface
                                        }
                                    }

                                    def Material "material_white_2"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_2/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_2.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (1, 1, 1)
                                            float inputs:metallic = 0
                                            float inputs:roughness = 0.5
                                            float inputs:specular_level = 0.5
                                            token outputs:surface
                                        }
                                    }
                                }

                                def "_geom_26" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_26.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_1>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def "_geom_27" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_27.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_black>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def "_geom_28" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_28.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/visuals/Looks/material_white_2>
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }

                            def "collisions"
                            {
                                def "_geom_29" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_29.usda@
                                )
                                {
                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/collisions/Looks/material_rgba>
                                    uniform token physics:approximation = "convexHull"
                                    uniform token purpose = "guide"
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Scope "Looks"
                                {
                                    def Material "material_rgba"
                                    {
                                        token inputs:frame:stPrimvarName = "st"
                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                        def Shader "stReader"
                                        {
                                            uniform token info:id = "UsdPrimvarReader_float2"
                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                            float2 outputs:result
                                        }

                                        def Shader "PBRShader"
                                        {
                                            uniform token info:id = "UsdPreviewSurface"
                                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                            float inputs:opacity = 0
                                            token outputs:surface
                                        }
                                    }
                                }
                            }

                            def "joints"
                            {
                                def PhysicsRevoluteJoint "joint4" (
                                    prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                )
                                {
                                    float drive:X:physics:damping = 1
                                    float drive:X:physics:stiffness = 0
                                    uniform token drive:X:physics:type = "force"
                                    custom int keyframeIndex = 0
                                    custom bool limited = 1
                                    float3 physics:axisVector = (0, 0, 1)
                                    rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3>
                                    rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4>
                                    float physics:breakForce = 3.4028235e38
                                    float physics:breakTorque = 3.4028235e38
                                    point3f physics:localPos0 = (0.08249999, -1.8835069e-8, -0.31599998)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (0.99999994, 0, 0, 0)
                                    quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                                    float physics:lowerLimit = -176.00116
                                    float physics:upperLimit = -3.999245
                                    float physxJoint:armature = 0.1
                                    float physxLimit:X:damping = 1
                                    float physxLimit:X:stiffness = 0
                                }
                            }

                            def Xform "link5" (
                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                            )
                            {
                                custom int keyframeIndex = 0
                                custom bool mjcfInertial = 1
                                custom bool mocap = 0
                                point3f physics:centerOfMass = (-0.011953, 0.041065, -0.038437)
                                float3 physics:diagonalInertia = (0.03676254, 0.028853092, 0.008034371)
                                float physics:mass = 1.225946
                                quatf physics:principalAxes = (0.9873133, -0.012195346, 0.07191866, -0.14103723)
                                matrix4d xformOp:transform = ( (1, 0, -0, 0), (-0, 3.422854177870249e-8, -0.9999999657714582, 0), (0, 0.9999999657714582, 3.422854177870249e-8, 0), (-0.08250000327825546, 0.3840000033378601, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def "visuals"
                                {
                                    def "_geom_30" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_30.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_black>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_black"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_black/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                float inputs:metallic = 0
                                                float inputs:roughness = 0.5
                                                float inputs:specular_level = 0.5
                                                token outputs:surface
                                            }
                                        }

                                        def Material "material_white"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (1, 1, 1)
                                                float inputs:metallic = 0
                                                float inputs:roughness = 0.5
                                                float inputs:specular_level = 0.5
                                                token outputs:surface
                                            }
                                        }

                                        def Material "material_white_1"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (1, 1, 1)
                                                float inputs:metallic = 0
                                                float inputs:roughness = 0.5
                                                float inputs:specular_level = 0.5
                                                token outputs:surface
                                            }
                                        }
                                    }

                                    def "_geom_31" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_31.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def "_geom_32" (
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_32.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/visuals/Looks/material_white_1>
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }
                                }

                                def "collisions"
                                {
                                    def "_geom_33" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_33.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def Scope "Looks"
                                    {
                                        def Material "material_rgba"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                float inputs:opacity = 0
                                                token outputs:surface
                                            }
                                        }

                                        def Material "material_rgba_1"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                float inputs:opacity = 0
                                                token outputs:surface
                                            }
                                        }

                                        def Material "material_rgba_2"
                                        {
                                            token inputs:frame:stPrimvarName = "st"
                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                            def Shader "stReader"
                                            {
                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                                float2 outputs:result
                                            }

                                            def Shader "PBRShader"
                                            {
                                                uniform token info:id = "UsdPreviewSurface"
                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                float inputs:opacity = 0
                                                token outputs:surface
                                            }
                                        }
                                    }

                                    def "_geom_34" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_34.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_1>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }

                                    def "_geom_35" (
                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_35.usda@
                                    )
                                    {
                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/collisions/Looks/material_rgba_2>
                                        uniform token physics:approximation = "convexHull"
                                        uniform token purpose = "guide"
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                    }
                                }

                                def "joints"
                                {
                                    def PhysicsRevoluteJoint "joint5" (
                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                    )
                                    {
                                        float drive:X:physics:damping = 1
                                        float drive:X:physics:stiffness = 0
                                        uniform token drive:X:physics:type = "force"
                                        custom int keyframeIndex = 0
                                        custom bool limited = 1
                                        float3 physics:axisVector = (0, 0, 1)
                                        rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4>
                                        rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5>
                                        float physics:breakForce = 3.4028235e38
                                        float physics:breakTorque = 3.4028235e38
                                        point3f physics:localPos0 = (-0.16499998, -2.2888184e-8, -0.38399997)
                                        point3f physics:localPos1 = (0, 0, 0)
                                        quatf physics:localRot0 = (0, -0.99999994, 0, 0)
                                        quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                                        float physics:lowerLimit = -166.00305
                                        float physics:upperLimit = 166.00305
                                        float physxJoint:armature = 0.1
                                        float physxLimit:X:damping = 1
                                        float physxLimit:X:stiffness = 0
                                    }
                                }

                                def Xform "link6" (
                                    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                )
                                {
                                    custom int keyframeIndex = 0
                                    custom bool mjcfInertial = 1
                                    custom bool mocap = 0
                                    point3f physics:centerOfMass = (0.060149, -0.014117, -0.010517)
                                    float3 physics:diagonalInertia = (0.001597865, 0.004310374, 0.005842761)
                                    float physics:mass = 1.666555
                                    quatf physics:principalAxes = (0.98386776, -0.09178109, -0.14478663, -0.051161077)
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]

                                    def "visuals"
                                    {
                                        def "_geom_36" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_36.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_off_white>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_off_white"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_off_white/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_off_white.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_black"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_1"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_2"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_2/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_2.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_3"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_3/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_3.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_4"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_4/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_4.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_light_blue"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.039216, 0.541176, 0.780392)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_light_blue_1"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue_1/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue_1.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.039216, 0.541176, 0.780392)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_black_1"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_black_2"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_2/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_2.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_5"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_5/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_5.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_green"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_green/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_green.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0, 1, 0)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_6"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_6/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_6.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_black_3"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_3/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_3.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_black_4"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_4/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_4.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }

                                            def Material "material_white_7"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_7/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_7.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (1, 1, 1)
                                                    float inputs:metallic = 0
                                                    float inputs:roughness = 0.5
                                                    float inputs:specular_level = 0.5
                                                    token outputs:surface
                                                }
                                            }
                                        }

                                        def "_geom_37" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_37.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_38" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_38.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_39" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_39.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_1>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_40" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_40.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_2>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_41" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_41.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_3>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_42" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_42.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_4>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_43" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_43.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_44" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_44.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_light_blue_1>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_45" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_45.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_1>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_46" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_46.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_2>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_47" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_47.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_5>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_48" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_48.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_green>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_49" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_49.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_6>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_50" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_50.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_3>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_51" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_51.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_black_4>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def "_geom_52" (
                                            prepend apiSchemas = ["MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_52.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/visuals/Looks/material_white_7>
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }
                                    }

                                    def "collisions"
                                    {
                                        def "_geom_53" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                            prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_53.usda@
                                        )
                                        {
                                            rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/collisions/Looks/material_rgba>
                                            uniform token physics:approximation = "convexHull"
                                            uniform token purpose = "guide"
                                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]
                                        }

                                        def Scope "Looks"
                                        {
                                            def Material "material_rgba"
                                            {
                                                token inputs:frame:stPrimvarName = "st"
                                                token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                def Shader "stReader"
                                                {
                                                    uniform token info:id = "UsdPrimvarReader_float2"
                                                    token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                    float2 outputs:result
                                                }

                                                def Shader "PBRShader"
                                                {
                                                    uniform token info:id = "UsdPreviewSurface"
                                                    color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                    float inputs:opacity = 0
                                                    token outputs:surface
                                                }
                                            }
                                        }
                                    }

                                    def "joints"
                                    {
                                        def PhysicsRevoluteJoint "joint6" (
                                            prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                        )
                                        {
                                            float drive:X:physics:damping = 1
                                            float drive:X:physics:stiffness = 0
                                            uniform token drive:X:physics:type = "force"
                                            custom int keyframeIndex = 0
                                            custom bool limited = 1
                                            float3 physics:axisVector = (0, 0, 1)
                                            rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5>
                                            rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6>
                                            float physics:breakForce = 3.4028235e38
                                            float physics:breakTorque = 3.4028235e38
                                            point3f physics:localPos0 = (0.08249999, 2.2888184e-8, -0.38399997)
                                            point3f physics:localPos1 = (0, 0, 0)
                                            quatf physics:localRot0 = (0, 0.99999994, 0, 0)
                                            quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                                            float physics:lowerLimit = -1.0026761
                                            float physics:upperLimit = 215.00241
                                            float physxJoint:armature = 0.1
                                            float physxLimit:X:damping = 1
                                            float physxLimit:X:stiffness = 0
                                        }
                                    }

                                    def Xform "link7" (
                                        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                    )
                                    {
                                        custom int keyframeIndex = 0
                                        custom bool mjcfInertial = 1
                                        custom bool mocap = 0
                                        point3f physics:centerOfMass = (0.010517, -0.004252, 0.061597)
                                        float3 physics:diagonalInertia = (0.012734493, 0.010105477, 0.00451803)
                                        float physics:mass = 0.735522
                                        quatf physics:principalAxes = (0.9929385, -0.07620413, 0.07335951, -0.053706657)
                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854177870249e-8, 0.9999999657714582, 0), (0, -0.9999999657714582, 3.422854177870249e-8, 0), (0.08799999952316284, 0, 0, 1) )
                                        uniform token[] xformOpOrder = ["xformOp:transform"]

                                        def "visuals"
                                        {
                                            def "_geom_54" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_54.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_white"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (1, 1, 1)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black_1"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black_2"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_2/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_2.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black_3"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_3/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_3.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black_4"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_4/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_4.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_black_5"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_5/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_5.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }

                                                def Material "material_white_1"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white_1/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white_1.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (1, 1, 1)
                                                        float inputs:metallic = 0
                                                        float inputs:roughness = 0.5
                                                        float inputs:specular_level = 0.5
                                                        token outputs:surface
                                                    }
                                                }
                                            }

                                            def "_geom_55" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_55.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_56" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_56.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_1>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_57" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_57.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_2>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_58" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_58.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_3>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_59" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_59.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_4>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_60" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_60.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_black_5>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def "_geom_61" (
                                                prepend apiSchemas = ["MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_61.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/visuals/Looks/material_white_1>
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }
                                        }

                                        def "collisions"
                                        {
                                            def "_geom_62" (
                                                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_62.usda@
                                            )
                                            {
                                                rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/collisions/Looks/material_rgba>
                                                uniform token physics:approximation = "convexHull"
                                                uniform token purpose = "guide"
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]
                                            }

                                            def Scope "Looks"
                                            {
                                                def Material "material_rgba"
                                                {
                                                    token inputs:frame:stPrimvarName = "st"
                                                    token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                    def Shader "stReader"
                                                    {
                                                        uniform token info:id = "UsdPrimvarReader_float2"
                                                        token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                        float2 outputs:result
                                                    }

                                                    def Shader "PBRShader"
                                                    {
                                                        uniform token info:id = "UsdPreviewSurface"
                                                        color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                        float inputs:opacity = 0
                                                        token outputs:surface
                                                    }
                                                }
                                            }
                                        }

                                        def "joints"
                                        {
                                            def PhysicsRevoluteJoint "joint7" (
                                                prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                            )
                                            {
                                                float drive:X:physics:damping = 1
                                                float drive:X:physics:stiffness = 0
                                                uniform token drive:X:physics:type = "force"
                                                custom int keyframeIndex = 0
                                                custom bool limited = 1
                                                float3 physics:axisVector = (0, 0, 1)
                                                rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6>
                                                rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7>
                                                float physics:breakForce = 3.4028235e38
                                                float physics:breakTorque = 3.4028235e38
                                                point3f physics:localPos0 = (0.087999985, 0, 0)
                                                point3f physics:localPos1 = (0, 0, 0)
                                                quatf physics:localRot0 = (0.99999994, 0, 0, 0)
                                                quatf physics:localRot1 = (0.99999994, 0, 0, 0)
                                                float physics:lowerLimit = -166.00305
                                                float physics:upperLimit = 166.00305
                                                float physxJoint:armature = 0.1
                                                float physxLimit:X:damping = 1
                                                float physxLimit:X:stiffness = 0
                                            }
                                        }

                                        def Xform "hand" (
                                            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                        )
                                        {
                                            custom int keyframeIndex = 0
                                            custom bool mjcfInertial = 1
                                            custom bool mocap = 0
                                            point3f physics:centerOfMass = (-0.01, 0, 0.03)
                                            float3 physics:diagonalInertia = (0.001, 0.0025, 0.0017)
                                            float physics:mass = 0.73
                                            quatf physics:principalAxes = (1, 0, 0, 0)
                                            matrix4d xformOp:transform = ( (0.7071067450934194, -0.7071068943280352, -0, 0), (0.7071068943280352, 0.7071067450934194, 0, 0), (0, -0, 1, 0), (0, 0, 0.10700000077486038, 1) )
                                            uniform token[] xformOpOrder = ["xformOp:transform"]

                                            def "visuals"
                                            {
                                                def "_geom_63" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_63.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_off_white"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                                                            float inputs:metallic = 0
                                                            float inputs:roughness = 0.5
                                                            float inputs:specular_level = 0.5
                                                            token outputs:surface
                                                        }
                                                    }

                                                    def Material "material_black"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                            float inputs:metallic = 0
                                                            float inputs:roughness = 0.5
                                                            float inputs:specular_level = 0.5
                                                            token outputs:surface
                                                        }
                                                    }

                                                    def Material "material_black_1"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black_1/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black_1.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                            float inputs:metallic = 0
                                                            float inputs:roughness = 0.5
                                                            float inputs:specular_level = 0.5
                                                            token outputs:surface
                                                        }
                                                    }

                                                    def Material "material_white"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_white/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_white.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (1, 1, 1)
                                                            float inputs:metallic = 0
                                                            float inputs:roughness = 0.5
                                                            float inputs:specular_level = 0.5
                                                            token outputs:surface
                                                        }
                                                    }

                                                    def Material "material_off_white_1"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white_1/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white_1.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                                                            float inputs:metallic = 0
                                                            float inputs:roughness = 0.5
                                                            float inputs:specular_level = 0.5
                                                            token outputs:surface
                                                        }
                                                    }
                                                }

                                                def "_geom_64" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_64.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def "_geom_65" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_65.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_black_1>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def "_geom_66" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_66.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_white>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def "_geom_67" (
                                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_67.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/visuals/Looks/material_off_white_1>
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }
                                            }

                                            def "collisions"
                                            {
                                                def "_geom_68" (
                                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_68.usda@
                                                )
                                                {
                                                    rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/collisions/Looks/material_rgba>
                                                    uniform token physics:approximation = "convexHull"
                                                    uniform token purpose = "guide"
                                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                                }

                                                def Scope "Looks"
                                                {
                                                    def Material "material_rgba"
                                                    {
                                                        token inputs:frame:stPrimvarName = "st"
                                                        token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                        def Shader "stReader"
                                                        {
                                                            uniform token info:id = "UsdPrimvarReader_float2"
                                                            token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                            float2 outputs:result
                                                        }

                                                        def Shader "PBRShader"
                                                        {
                                                            uniform token info:id = "UsdPreviewSurface"
                                                            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                            float inputs:opacity = 0
                                                            token outputs:surface
                                                        }
                                                    }
                                                }
                                            }

                                            def "joints"
                                            {
                                                def PhysicsFixedJoint "hand"
                                                {
                                                    rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7>
                                                    rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand>
                                                    float physics:breakForce = 3.4028235e38
                                                    float physics:breakTorque = 3.4028235e38
                                                    point3f physics:localPos0 = (0, 0, 0.107)
                                                    point3f physics:localPos1 = (0, 0, 0)
                                                    quatf physics:localRot0 = (0.9238796, 0, 0, -0.38268346)
                                                    quatf physics:localRot1 = (1, 0, 0, 0)
                                                }
                                            }

                                            def Xform "ee_center_body" (
                                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                                            )
                                            {
                                                custom int keyframeIndex = 0
                                                custom bool mocap = 0
                                                float physics:density = 1000
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.10499999672174454, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                                def "sites"
                                                {
                                                    def Sphere "ee_center_site" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                    )
                                                    {
                                                        float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
                                                        custom int group = 0
                                                        custom bool hasFromto = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/ee_center_body/sites/Looks/material_rgba>
                                                        custom bool mjcfSite = 1
                                                        custom string name = "ee_center_site"
                                                        custom float3 pos = (0, 0, 0)
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        double radius = 0.009999999776482582
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 siteSize = (0.01, 0.005, 0.005)
                                                        custom string type = "sphere"
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/ee_center_body/sites/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/ee_center_body/sites/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }
                                                }

                                                def "joints"
                                                {
                                                    def PhysicsFixedJoint "ee_center_body"
                                                    {
                                                        rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand>
                                                        rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/ee_center_body>
                                                        float physics:breakForce = 3.4028235e38
                                                        float physics:breakTorque = 3.4028235e38
                                                        point3f physics:localPos0 = (0, 0, 0.105)
                                                        point3f physics:localPos1 = (0, 0, 0)
                                                        quatf physics:localRot0 = (1, 0, 0, 0)
                                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                                    }
                                                }
                                            }

                                            def Xform "left_finger" (
                                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                            )
                                            {
                                                custom int keyframeIndex = 1
                                                custom bool mjcfInertial = 1
                                                custom bool mocap = 0
                                                point3f physics:centerOfMass = (0, 0, 0)
                                                float3 physics:diagonalInertia = (0.000002375, 0.000002375, 7.5e-7)
                                                float physics:mass = 0.015
                                                quatf physics:principalAxes = (1, 0, 0, 0)
                                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.058400001376867294, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                                def "visuals"
                                                {
                                                    def "_geom_69" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_69.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_off_white>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_off_white"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_off_white/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_off_white.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                                                                float inputs:metallic = 0
                                                                float inputs:roughness = 0.5
                                                                float inputs:specular_level = 0.5
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_black"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_black/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                                float inputs:metallic = 0
                                                                float inputs:roughness = 0.5
                                                                float inputs:specular_level = 0.5
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }

                                                    def "_geom_70" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_70.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/visuals/Looks/material_black>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }
                                                }

                                                def "collisions"
                                                {
                                                    def "_geom_71" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_71.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba>
                                                        uniform token physics:approximation = "convexHull"
                                                        uniform token purpose = "guide"
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_1"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_2"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_3"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_3/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_3.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_4"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_4/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_4.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_5"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_5/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_5.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }

                                                    def Cube "_geom_72" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.017, -0.008, -0.017), (0.017, 0.008, 0.017)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.0085, 0.004, 0.0085)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_1>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_72"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0, 0.0055, 0.0445)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.017000000923871994, 0, 0, 0), (0, 0.00800000037997961, 0, 0), (0, 0, 0.017000000923871994, 0), (0, 0.005499999970197678, 0.04450000077486038, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_73" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.006), (0.006, 0.004, 0.006)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.003)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_2>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_73"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.0055, 0.002, 0.05)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.006000000052154064, 0), (0.005499999970197678, 0.0020000000949949026, 0.05000000074505806, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_74" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.006), (0.006, 0.004, 0.006)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.003)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_3>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_74"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (-0.0055, 0.002, 0.05)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.006000000052154064, 0), (-0.005499999970197678, 0.0020000000949949026, 0.05000000074505806, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_75" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.007), (0.006, 0.004, 0.007)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.0035)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_4>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_75"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.0055, 0.002, 0.0395)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.007000000216066837, 0), (0.005499999970197678, 0.0020000000949949026, 0.039500001817941666, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_76" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.007), (0.006, 0.004, 0.007)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.0035)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger/collisions/Looks/material_rgba_5>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_76"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (-0.0055, 0.002, 0.0395)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.007000000216066837, 0), (-0.005499999970197678, 0.0020000000949949026, 0.039500001817941666, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }
                                                }

                                                def "joints"
                                                {
                                                    def PhysicsPrismaticJoint "finger_joint1" (
                                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                    )
                                                    {
                                                        float drive:X:physics:damping = 1
                                                        float drive:X:physics:stiffness = 0
                                                        uniform token drive:X:physics:type = "force"
                                                        custom int keyframeIndex = 0
                                                        custom bool limited = 1
                                                        float3 physics:axisVector = (0, 1, 0)
                                                        rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand>
                                                        rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/left_finger>
                                                        float physics:breakForce = 3.4028235e38
                                                        float physics:breakTorque = 3.4028235e38
                                                        point3f physics:localPos0 = (0, 0, -0.048600018)
                                                        point3f physics:localPos1 = (0, 0, 0)
                                                        quatf physics:localRot0 = (0.9238796, 0, 0, 0.38268346)
                                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                                        float physics:lowerLimit = 0
                                                        float physics:upperLimit = 0.04
                                                        float physxJoint:armature = 0.1
                                                        float physxLimit:X:damping = 1
                                                        float physxLimit:X:stiffness = 0
                                                    }
                                                }
                                            }

                                            def Xform "right_finger" (
                                                prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
                                            )
                                            {
                                                custom int keyframeIndex = 2
                                                custom bool mjcfInertial = 1
                                                custom bool mocap = 0
                                                point3f physics:centerOfMass = (0, 0, 0)
                                                float3 physics:diagonalInertia = (0.000002375, 0.000002375, 7.5e-7)
                                                float physics:mass = 0.015
                                                quatf physics:principalAxes = (1, 0, 0, 0)
                                                matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0, 0, 0.058400001376867294, 1) )
                                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                                def "visuals"
                                                {
                                                    def "_geom_77" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_77.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_off_white>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_off_white"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_off_white/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_off_white.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.901961, 0.921569, 0.929412)
                                                                float inputs:metallic = 0
                                                                float inputs:roughness = 0.5
                                                                float inputs:specular_level = 0.5
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_black"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_black/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_black.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                                                                float inputs:metallic = 0
                                                                float inputs:roughness = 0.5
                                                                float inputs:specular_level = 0.5
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }

                                                    def "_geom_78" (
                                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_78.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/visuals/Looks/material_black>
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }
                                                }

                                                def "collisions"
                                                {
                                                    def "_geom_79" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                        prepend payload = @d:/Repo/USDProcessTest/Assets/Importer/panda_mocap/_geom_79.usda@
                                                    )
                                                    {
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba>
                                                        uniform token physics:approximation = "convexHull"
                                                        uniform token purpose = "guide"
                                                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                    }

                                                    def Scope "Looks"
                                                    {
                                                        def Material "material_rgba"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_1"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_1/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_1.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_2"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_2/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_2.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_3"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_3/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_3.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_4"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_4/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_4.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }

                                                        def Material "material_rgba_5"
                                                        {
                                                            token inputs:frame:stPrimvarName = "st"
                                                            token outputs:surface.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_5/PBRShader.outputs:surface>

                                                            def Shader "stReader"
                                                            {
                                                                uniform token info:id = "UsdPrimvarReader_float2"
                                                                token inputs:varname.connect = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_5.inputs:frame:stPrimvarName>
                                                                float2 outputs:result
                                                            }

                                                            def Shader "PBRShader"
                                                            {
                                                                uniform token info:id = "UsdPreviewSurface"
                                                                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                                                                float inputs:opacity = 0
                                                                token outputs:surface
                                                            }
                                                        }
                                                    }

                                                    def Cube "_geom_80" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.017, -0.008, -0.017), (0.017, 0.008, 0.017)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.0085, 0.004, 0.0085)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_1>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_80"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0, 0.0055, 0.0445)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.017000000923871994, 0, 0, 0), (0, 0.00800000037997961, 0, 0), (0, 0, 0.017000000923871994, 0), (0, 0.005499999970197678, 0.04450000077486038, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_81" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.006), (0.006, 0.004, 0.006)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.003)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_2>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_81"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.0055, 0.002, 0.05)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.006000000052154064, 0), (0.005499999970197678, 0.0020000000949949026, 0.05000000074505806, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_82" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.006), (0.006, 0.004, 0.006)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.003)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_3>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_82"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (-0.0055, 0.002, 0.05)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.006000000052154064, 0), (-0.005499999970197678, 0.0020000000949949026, 0.05000000074505806, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_83" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.007), (0.006, 0.004, 0.007)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.0035)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_4>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_83"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (0.0055, 0.002, 0.0395)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.007000000216066837, 0), (0.005499999970197678, 0.0020000000949949026, 0.039500001817941666, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }

                                                    def Cube "_geom_84" (
                                                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
                                                    )
                                                    {
                                                        custom float4 axisangle = (0, 0, 0, 0)
                                                        custom int conaffinity = 1
                                                        custom int condim = 3
                                                        custom int contype = 1
                                                        custom float density = 1000
                                                        float3[] extent = [(-0.006, -0.004, -0.007), (0.006, 0.004, 0.007)]
                                                        custom float3 friction = (1, 0.005, 0.0001)
                                                        custom float3 geomSize = (0.003, 0.002, 0.0035)
                                                        custom int group = 3
                                                        custom bool hasFromto = 0
                                                        custom bool hasMass = 0
                                                        custom float margin = 0
                                                        custom string material = ""
                                                        rel material:binding = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger/collisions/Looks/material_rgba_5>
                                                        custom bool mjcfGeom = 1
                                                        custom string name = "_geom_84"
                                                        uniform token physics:approximation = "boundingCube"
                                                        custom float3 pos = (-0.0055, 0.002, 0.0395)
                                                        uniform token purpose = "guide"
                                                        custom quatf quat = (1, 0, 0, 0)
                                                        custom float4 rgba = (0.5, 0.5, 0.5, 1)
                                                        custom float3 solimp = (0.9, 0.95, 0.001)
                                                        custom float2 solref = (0.02, 1)
                                                        custom string type = "box"
                                                        matrix4d xformOp:transform = ( (0.006000000052154064, 0, 0, 0), (0, 0.004000000189989805, 0, 0), (0, 0, 0.007000000216066837, 0), (-0.005499999970197678, 0.0020000000949949026, 0.039500001817941666, 1) )
                                                        uniform token[] xformOpOrder = ["xformOp:transform"]
                                                        custom float3 zaxis = (0, 0, 0)
                                                    }
                                                }

                                                def "joints"
                                                {
                                                    def PhysicsPrismaticJoint "finger_joint2" (
                                                        prepend apiSchemas = ["PhysxJointAPI", "PhysxLimitAPI:X", "PhysicsDriveAPI:X"]
                                                    )
                                                    {
                                                        float drive:X:physics:damping = 1
                                                        float drive:X:physics:stiffness = 0
                                                        uniform token drive:X:physics:type = "force"
                                                        custom int keyframeIndex = 0
                                                        custom bool limited = 1
                                                        float3 physics:axisVector = (0, 1, 0)
                                                        rel physics:body0 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand>
                                                        rel physics:body1 = </rootPrim/link0/link0/link1/link2/link3/link4/link5/link6/link7/hand/right_finger>
                                                        float physics:breakForce = 3.4028235e38
                                                        float physics:breakTorque = 3.4028235e38
                                                        point3f physics:localPos0 = (0, 0, -0.048600018)
                                                        point3f physics:localPos1 = (0, 0, 0)
                                                        quatf physics:localRot0 = (-0.38268346, 0, 0, 0.9238796)
                                                        quatf physics:localRot1 = (1, 0, 0, 0)
                                                        float physics:lowerLimit = 0
                                                        float physics:upperLimit = 0.04
                                                        float physxJoint:armature = 0.1
                                                        float physxLimit:X:damping = 1
                                                        float physxLimit:X:stiffness = 0
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    def Xform "worldBody" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI"]
    )
    {
    }
}

def "actuators"
{
    def "actuator_0"
    {
        custom int actuatorIdx = 1
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -4500 -450", "affine", "-2.8973 2.8973", "none", "-87 87", "4500", "joint1", "actuator1"]
    }

    def "actuator_1"
    {
        custom int actuatorIdx = 2
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -4500 -450", "affine", "-1.7628 1.7628", "none", "-87 87", "4500", "joint2", "actuator2"]
    }

    def "actuator_2"
    {
        custom int actuatorIdx = 3
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -3500 -350", "affine", "-2.8973 2.8973", "none", "-87 87", "3500", "joint3", "actuator3"]
    }

    def "actuator_3"
    {
        custom int actuatorIdx = 4
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -3500 -350", "affine", "-3.0718 -0.0698", "none", "-87 87", "3500", "joint4", "actuator4"]
    }

    def "actuator_4"
    {
        custom int actuatorIdx = 5
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -2000 -200", "affine", "-2.8973 2.8973", "none", "-12 12", "2000", "joint5", "actuator5"]
    }

    def "actuator_5"
    {
        custom int actuatorIdx = 6
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -2000 -200", "affine", "-0.0175 3.7525", "none", "-12 12", "2000", "joint6", "actuator6"]
    }

    def "actuator_6"
    {
        custom int actuatorIdx = 7
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -2000 -200", "affine", "-2.8973 2.8973", "none", "-12 12", "2000", "joint7", "actuator7"]
    }

    def "actuator_7"
    {
        custom int actuatorIdx = 8
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -500 -10", "affine", "0 0.04", "none", "-120 120", "500 0 0", "finger_joint1", "r_gripper_finger_joint"]
    }

    def "actuator_8"
    {
        custom int actuatorIdx = 9
        custom int actuatorType = 3
        custom string[] keys = ["biasprm", "biastype", "ctrlrange", "dyntype", "forcerange", "gainprm", "joint", "name"]
        custom string[] values = ["0 -500 -10", "affine", "0 0.04", "none", "-120 120", "500 0 0", "finger_joint2", "l_gripper_finger_joint"]
    }
}

def "tendons"
{
}

def "equalities"
{
    def "equality_0"
    {
        custom int equalityType = 1
        custom string[] keys = ["body1", "body2", "solimp", "solref"]
        custom string[] values = ["panda_mocap", "ee_center_body", "0.9 0.95 0.001", "0.02 1"]
    }
}

